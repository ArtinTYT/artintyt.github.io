<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>重要通知：网站更新计划变更</title>
    <link href="/2025/04/20/test/"/>
    <url>/2025/04/20/test/</url>
    
    <content type="html"><![CDATA[<h1 id="重要通知：网站更新计划变更"><a href="#重要通知：网站更新计划变更" class="headerlink" title="重要通知：网站更新计划变更"></a>重要通知：网站更新计划变更</h1><p>自 2025年4月20日 起，本站将全面转向 AI 智能更新，内容聚焦 机器学习（ML）、深度学习（DL）、大语言模型（LLMs） 等领域的核心思考，不再更新建站相关技术分享。</p><p>历史文章仍可查阅，感谢支持，未来一起探索 AI 前沿！</p>]]></content>
    
    
    
    <tags>
      
      <tag>通知</tag>
      
      <tag>更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>李沐-手动DL 环境配置</title>
    <link href="/2025/04/16/5-%E6%9D%8E%E6%B2%90-%E6%89%8B%E5%8A%A8DL%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <url>/2025/04/16/5-%E6%9D%8E%E6%B2%90-%E6%89%8B%E5%8A%A8DL%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>包括安装步骤、踩坑提示、适配d2l版本说明，适合写给想要在本地用 Jupyter Notebook 或者 PyCharm 学习这本书的朋友。</p><h2 id="使用的环境配置（推荐）"><a href="#使用的环境配置（推荐）" class="headerlink" title="使用的环境配置（推荐）"></a>使用的环境配置（推荐）</h2><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>Python</td><td>3.8</td></tr><tr><td>d2l</td><td>0.17.6</td></tr><tr><td>torch</td><td>1.13+</td></tr><tr><td>pandas</td><td>&gt;&#x3D;1.2.4</td></tr><tr><td>jupyter notebook</td><td>看情况安装</td></tr></tbody></table><p>版本过高，会导致一系列效果无法呈现的问题。</p><h2 id="一、创建-Conda-虚拟环境"><a href="#一、创建-Conda-虚拟环境" class="headerlink" title="一、创建 Conda 虚拟环境"></a>一、创建 Conda 虚拟环境</h2><p>推荐使用 Conda 来管理环境，避免依赖冲突。首先创建一个 Python 3.8 的新环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n d2l-py38 python=3.8<br>conda activate d2l-py38<br></code></pre></td></tr></table></figure><h2 id="二、安装-d2l-与依赖"><a href="#二、安装-d2l-与依赖" class="headerlink" title="二、安装 d2l 与依赖"></a>二、安装 d2l 与依赖</h2><p>我们使用的是 <code>d2l==0.17.6</code> 版本，这是与《动手学深度学习（PyTorch）》最兼容的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c conda-forge d2l=0.17.6<br></code></pre></td></tr></table></figure><p>安装其他依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch torchvision matplotlib pandas jupyter<br></code></pre></td></tr></table></figure><h2 id="三、测试示例代码是否正常运行"><a href="#三、测试示例代码是否正常运行" class="headerlink" title="三、测试示例代码是否正常运行"></a>三、测试示例代码是否正常运行</h2><p>打开 Jupyter：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter notebook<br></code></pre></td></tr></table></figure><p>我们使用的是 PyCharm 中集成的 notebook。</p><h2 id="四、常见错误与解决方案"><a href="#四、常见错误与解决方案" class="headerlink" title="四、常见错误与解决方案"></a>四、常见错误与解决方案</h2><h3 id="🐛-1-AttributeError-module-d2l-torch-has-no-attribute-train-ch3"><a href="#🐛-1-AttributeError-module-d2l-torch-has-no-attribute-train-ch3" class="headerlink" title="🐛 1. AttributeError: module &#39;d2l.torch&#39; has no attribute &#39;train_ch3&#39;"></a>🐛 1. <code>AttributeError: module &#39;d2l.torch&#39; has no attribute &#39;train_ch3&#39;</code></h3><p>说明你装的是 <code>d2l</code> 新版本（比如 <code>0.17.7</code> 以后），该版本移除了一些旧函数。解决方法：</p><p>✅ <strong>回退到 0.17.6</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install d2l==0.17.6<br></code></pre></td></tr></table></figure><h3 id="🐛-2-Conda-报错-pandas-1-2-4-requires-python"><a href="#🐛-2-Conda-报错-pandas-1-2-4-requires-python" class="headerlink" title="🐛 2. Conda 报错 pandas 1.2.4 requires python&lt;3.10"></a>🐛 2. Conda 报错 <code>pandas 1.2.4 requires python&lt;3.10</code></h3><p>这是因为 <code>d2l==0.17.6</code> 依赖老版本 pandas（如 1.2.4），而 pandas 不兼容 Python 3.10。解决方法：</p><p>✅ 使用 Python 3.8 或 3.9 创建环境。</p><h2 id="五、删除不需要的-Conda-环境（可选）"><a href="#五、删除不需要的-Conda-环境（可选）" class="headerlink" title="五、删除不需要的 Conda 环境（可选）"></a>五、删除不需要的 Conda 环境（可选）</h2><p>查看所有环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><p>删除指定环境（比如 d2l-py310）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br>conda <span class="hljs-built_in">env</span> remove -n d2l-py310<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Error</tag>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 环境变量</title>
    <link href="/2025/03/01/3-macOS%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/"/>
    <url>/2025/03/01/3-macOS%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>在 macOS 系统中，可以通过以下方式来配置环境变量，查看环境变量。</p><hr><h2 id="1-临时设置（仅对当前终端会话有效）"><a href="#1-临时设置（仅对当前终端会话有效）" class="headerlink" title="1. 临时设置（仅对当前终端会话有效）"></a>1. 临时设置（仅对当前终端会话有效）</h2><p>在终端中直接使用 <code>export</code> 命令可以设置环境变量，这个变量只在当前会话内有效。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MY_VAR=<span class="hljs-string">&quot;my_value&quot;</span><br></code></pre></td></tr></table></figure><p>之后，你可以通过 <code>echo $MY_VAR</code> 来查看变量值。如果关闭终端或启动新的终端窗口，这个设置就会失效。</p><hr><h2 id="2-永久设置（对所有终端会话有效）"><a href="#2-永久设置（对所有终端会话有效）" class="headerlink" title="2. 永久设置（对所有终端会话有效）"></a>2. 永久设置（对所有终端会话有效）</h2><p>要永久设置环境变量，需要将 <code>export</code> 命令写入到 shell 的配置文件中。macOS 默认使用 zsh（macOS Catalina 及以上版本）：</p><ul><li><p><strong>如果你使用 zsh</strong>，可以编辑文件 <code>~/.zshrc</code> 或 <code>~/.zprofile</code>：</p><ol><li>打开终端，输入命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.zshrc<br></code></pre></td></tr></table></figure></li><li>在文件末尾添加你需要的环境变量配置，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MY_VAR=<span class="hljs-string">&quot;my_value&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/your/custom/path&quot;</span><br></code></pre></td></tr></table></figure></li><li>保存并退出（在 nano 中按 <code>Control+O</code> 保存，然后 <code>Control+X</code> 退出）。</li><li>使配置立即生效：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>如果你使用 bash</strong>（较旧版本或自行切换到 bash），则修改 <code>~/.bash_profile</code> 或 <code>~/.bashrc</code>：</p><ol><li>打开终端，输入命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.bash_profile<br></code></pre></td></tr></table></figure></li><li>添加环境变量配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MY_VAR=<span class="hljs-string">&quot;my_value&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/your/custom/path&quot;</span><br></code></pre></td></tr></table></figure></li><li>保存并退出，然后运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="3-查看环境变量"><a href="#3-查看环境变量" class="headerlink" title="3. 查看环境变量"></a>3. 查看环境变量</h2><ol><li><p><strong>使用 printenv 命令</strong><br>打开终端，输入以下命令查看所有环境变量：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printenv</span><br></code></pre></td></tr></table></figure><p>这条命令会列出当前会话中的所有环境变量及其值。</p></li><li><p><strong>使用 env 命令</strong><br>类似于 printenv，env 命令也可以显示环境变量：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure></li><li><p><strong>查看特定环境变量</strong><br>如果只想查看某个特定的环境变量，例如 PATH，可以这样输入：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure></li><li><p><strong>使用 set 命令</strong><br>输入以下命令也可以显示当前的所有环境变量和 shell 函数，但输出可能会更长：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt Engineering</title>
    <link href="/2025/02/27/2-prompt-engineering/"/>
    <url>/2025/02/27/2-prompt-engineering/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Prompt"><a href="#1-Prompt" class="headerlink" title="1. Prompt"></a>1. Prompt</h2><h3 id="1-1-Prompt-是什么？"><a href="#1-1-Prompt-是什么？" class="headerlink" title="1.1 Prompt 是什么？"></a>1.1 Prompt 是什么？</h3><p>Prompt 是一种人为构造的输入序列，用于引导 GPT 模型根据先前输入的内容生成相关的输出。简单来说，就是你向模型提供的 “提示词”。<br>在 ChatGpt 中，我们可以通过设计不同的 prompt，让模型生成与之相关的文本。例如，假设我们想让 ChatGpt 担任英语翻译。我们可以给模型提供以下 prompt：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">我希望你能担任英语翻译、拼写校对和修辞改进的角色。<br>我会用任何语言和你交流，你会识别语言，将其翻译并用更为优美和精炼的英语回答我。<br>请将我简单的词汇和句子替换成更为优美和高雅的表达方式，确保意思不变，但使其更具文学性。<br>请仅回答更正和改进的部分，不要写解释。我的第一句话是“how are you <span class="hljs-string">?，</span>请翻译它。<br></code></pre></td></tr></table></figure><p>这样，我们就可以期待模型生成一段文本了。</p><h3 id="1-2-Prompt-如何生成？"><a href="#1-2-Prompt-如何生成？" class="headerlink" title="1.2 Prompt 如何生成？"></a>1.2 Prompt 如何生成？</h3><p>我们应该怎么去写一个好的 prompt 呢？Github 上有位大佬 Matt Nigh 基于ChatGPT3 Prompt Engineering的分享, <a href="https://github.com/mattnigh/ChatGPT3-Free-Prompt-List">https://github.com/mattnigh/ChatGPT3-Free-Prompt-List</a></p><h2 id="2-Prompt-Engineering-实践"><a href="#2-Prompt-Engineering-实践" class="headerlink" title="2. Prompt Engineering 实践"></a>2. Prompt Engineering 实践</h2><h2 id="3-指示技术"><a href="#3-指示技术" class="headerlink" title="3. 指示技术"></a>3. 指示技术</h2><h2 id="4-结构化输出"><a href="#4-结构化输出" class="headerlink" title="4. 结构化输出"></a>4. 结构化输出</h2><h2 id="5-Prompt-应用"><a href="#5-Prompt-应用" class="headerlink" title="5. Prompt 应用"></a>5. Prompt 应用</h2><h2 id="6-GPT-4o-图像提示工程技术"><a href="#6-GPT-4o-图像提示工程技术" class="headerlink" title="6. GPT-4o 图像提示工程技术"></a>6. GPT-4o 图像提示工程技术</h2>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>Prompt_engineering</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenAI 常用参数</title>
    <link href="/2025/02/21/2-OpenAI%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/"/>
    <url>/2025/02/21/2-OpenAI%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><code>max_tokens</code>：控制生成内容的长度。</li><li><code>temperature</code>：控制生成内容的随机性和创造性。</li><li><code>n</code>：生成多个回答供选择。</li><li><code>top_p</code>：通过概率控制生成内容的多样性。</li><li><code>presence_penalty</code>：鼓励生成新内容，避免重复。</li><li><code>frequency_penalty</code>：减少词语重复，提高多样性。</li><li><code>stream</code>：控制生成的文本是否以流式方式逐步发送。</li></ul><h2 id="1-temperature（温度参数）"><a href="#1-temperature（温度参数）" class="headerlink" title="1. temperature（温度参数）"></a>1. <strong><code>temperature</code>（温度参数）</strong></h2><ul><li><strong>作用</strong>：控制输出概率分布的平滑程度，即生成文本的随机性。值范围[0,1]，值越大，生成的文本越随机。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>输入：你要写一首关于秋天的诗。</p><ul><li>temperature &#x3D; 0.2（低温度，收敛回答）：<ul><li>回应：“秋天的树叶飘舞在风中，金黄色的田野映入眼帘。”</li></ul></li><li>temperature &#x3D; 0.8（高温度，更随机）：<ul><li>回应：“秋天的旋律在微风中回荡，金黄的梦幻洒满田野。”</li></ul></li></ul><h2 id="2-top-p（控制采样）"><a href="#2-top-p（控制采样）" class="headerlink" title="2. top_p（控制采样）"></a>2. <strong><code>top_p</code>（控制采样）</strong></h2><ul><li><strong>定义</strong>：确定生成文本时考虑的 token 累计概率。值为0到1之间，常用来替代<code>temperature</code>设置。<code>top_p</code>为0.9时，模型仅在最有可能的 token 集合（累计概率达到0.9）中进行选择。</li><li><strong>作用</strong>：动态限制候选词的选择范围，避免模型选择过低概率的词汇，同时保留一定的多样性。控制生成内容的多样性，top_p越小，生成内容越确定。</li></ul><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><ul><li>输入：描述一个梦想中的度假胜地。</li><li>top_p &#x3D; 0.9（较有创意）：<ul><li>回应：“岛屿被蓝色的海水环绕，白色沙滩上点缀着茅草屋，椰子树随风摇曳。”</li></ul></li><li>top_p &#x3D; 0.5（较确定）：<ul><li>回应：“度假胜地是一座热带岛屿，有着美丽的海滩和清澈的海水，适合享受安静的时光。”</li></ul></li></ul><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a><strong>主要区别</strong></h2><table><thead><tr><th>参数</th><th>作用</th><th>影响</th><th>适用场景</th></tr></thead><tbody><tr><td><code>temperature</code></td><td>调整生成的<strong>随机性</strong></td><td>高温度生成更多样但可能不准确，低温度生成更稳定但可能重复</td><td>需要控制文本创造性或稳定性时</td></tr><tr><td><code>top_p</code></td><td>控制<strong>采样范围</strong></td><td>仅从概率较高的词中采样，动态调整候选池</td><td>需要平衡多样性和连贯性时</td></tr></tbody></table><h2 id="3-n（生成数量）"><a href="#3-n（生成数量）" class="headerlink" title="3. n（生成数量）"></a>3. <strong><code>n</code>（生成数量）</strong></h2><ul><li><strong>作用</strong>：指定每次请求生成多少个独立的文本候选。</li><li><strong>机制</strong>：<ul><li><code>n = 1</code>（默认）：返回一个生成结果。</li><li><code>n &gt; 1</code>：返回多个不同的生成结果（每个结果都是独立生成的）。</li></ul></li><li><strong>应用场景</strong>：<ul><li>通常用于需要多样性选择的场景，比如生成多个候选答案来挑选最佳的回答。</li></ul></li></ul><h2 id="4-max-tokens（最大生成长度）"><a href="#4-max-tokens（最大生成长度）" class="headerlink" title="4. max_tokens（最大生成长度）"></a>4. <strong><code>max_tokens</code>（最大生成长度）</strong></h2><ul><li><strong>作用</strong>：限制生成文本的最大长度，以 tokens 为单位。</li><li><strong>机制</strong>：<ul><li><code>max_tokens</code> 设置一个上限，超过这个值时，模型会停止输出。</li><li>如果 <code>max_tokens</code> 过小，可能导致句子被截断，影响可读性。</li><li><code>max_tokens</code> 过大可能会导致不必要的冗长输出，并增加计算成本。</li></ul></li><li><strong>应用场景</strong>：<ul><li>限制输出长度，适用于对话系统、摘要生成等需要短文本的任务。</li><li>避免无限制的文本生成，提高效率。</li><li>应用的时候<strong>设置10个 token</strong> ， 可能左右会<strong>使用10个左右的 token</strong>， 要根据具体分词策略来计算。比如：<code>秋风起</code>，<code>秋风</code>可以作为一个 token ， 也可能是<code>风起</code>作为一个 token。</li></ul></li></ul><h2 id="5-presence-penalty（出现惩罚-阻止调整）"><a href="#5-presence-penalty（出现惩罚-阻止调整）" class="headerlink" title="5. presence_penalty（出现惩罚&#x2F;阻止调整）"></a>5. <strong><code>presence_penalty</code>（出现惩罚&#x2F;阻止调整）</strong></h2><ul><li><strong>作用</strong>：影响模型生成新主题内容(新词)的倾向，减少重复内容，提高生成的多样性。值范围通常在-2.0到2.0之间。较高的值鼓励模型生成前面未出现过的新内容。</li><li><strong>应用场景</strong>：<ul><li>适用于对话、创意写作，避免模型不断重复相同的短语。</li><li>适用于故事生成，让模型更愿意引入新概念。</li></ul></li><li>例子：<ul><li>输入：重新生成描述夏天的句子。</li><li>presence_penalty &#x3D; 1.0（较高惩罚）：<ul><li>回应：“夏天阳光充足，清凉的冰淇淋是人们的最爱。”</li></ul></li><li>presence_penalty &#x3D; 0.0（无惩罚）：<ul><li>回应：“夏天阳光灿烂，人们喜欢躺在沙滩上享受日光浴。”</li></ul></li></ul></li></ul><h2 id="6-frequency-penalty（重复词惩罚因子）"><a href="#6-frequency-penalty（重复词惩罚因子）" class="headerlink" title="6. frequency_penalty（重复词惩罚因子）"></a>6. <strong><code>frequency_penalty</code>（重复词惩罚因子）</strong></h2><ul><li><p><strong>作用</strong>：减少重复词的出现，使文本更加多样化。值范围通常[-2.0,2.0]。高值会减少模型重复使用某些词或短语的频率。</p></li><li><p><strong>用法</strong>：用来减少重复词语，提高输出的流畅度和多样性。</p></li></ul><h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><ul><li>输入：描述你的一天。</li><li>frequency_penalty &#x3D; 1.5（较高惩罚）：<ul><li>回应：“我的一天开始于晨跑，然后享用早餐并开始工作。午餐后，进行一些锻炼和阅读。”</li></ul></li><li>frequency_penalty &#x3D; 0.0（无惩罚）：<ul><li>回应：“我的一天从晨跑开始，之后吃早餐准备工作。午饭后，我会去健身房锻炼，结束后读书放松。”</li></ul></li></ul><h2 id="5-stream（流式输出）"><a href="#5-stream（流式输出）" class="headerlink" title="5. stream（流式输出）"></a>5. <strong><code>stream</code>（流式输出）</strong></h2><ul><li><strong>作用</strong>：控制模型是否<strong>逐步返回</strong>生成的文本，而不是等待完整生成后再返回。</li><li><strong>机制</strong>：<ul><li><code>stream = False</code>（默认）：模型等待完整生成后再一次性返回所有结果。</li><li><code>stream = True</code>：模型逐步返回 token，使用户可以实时看到输出。</li></ul></li><li><strong>应用场景</strong>：<ul><li>适用于<strong>对话机器人、实时应用</strong>（如 AI 助手、代码补全）。</li><li>增强用户体验，使生成过程更加流畅（类似于 ChatGPT 的流式响应）。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"> response = openai.ChatCompletion.create(<br>   <span class="hljs-attribute">model</span>=<span class="hljs-string">&quot;gpt-4&quot;</span>,<br>   messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;解释一下量子力学&quot;</span>&#125;],<br>   <span class="hljs-attribute">stream</span>=<span class="hljs-literal">True</span><br>)<br> <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>   <span class="hljs-built_in">print</span>(chunk[<span class="hljs-string">&#x27;choices&#x27;</span>][0][<span class="hljs-string">&#x27;delta&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>], <span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="参数总结对比"><a href="#参数总结对比" class="headerlink" title="参数总结对比"></a>参数总结对比</h2><table><thead><tr><th>参数</th><th>作用</th><th>典型取值</th><th>影响</th></tr></thead><tbody><tr><td><code>n</code></td><td>生成多少个不同的输出</td><td>1-10（通常 1）</td><td>控制输出数量，提高选择性</td></tr><tr><td><code>max_tokens</code></td><td>限制最大输出长度</td><td>50-4000</td><td>避免超长生成或截断句子</td></tr><tr><td><code>presence_penalty</code></td><td>促使生成新词，减少重复</td><td>-2.0 到 2.0</td><td>促进创造性，减少重复内容</td></tr><tr><td><code>frequency_penalty</code></td><td>降低重复词出现的频率</td><td>-2.0 到 2.0</td><td>减少冗余，提高文本质量</td></tr><tr><td><code>stream</code></td><td>控制是否逐步返回生成文本</td><td>True&#x2F;False</td><td>适用于实时交互，提高用户体验</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>parameters</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文章草稿-不显示</title>
    <link href="/2025/02/20/1-%E6%96%87%E7%AB%A0%E8%8D%89%E7%A8%BF-%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <url>/2025/02/20/1-%E6%96%87%E7%AB%A0%E8%8D%89%E7%A8%BF-%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>博客的半成品保存但是不想发布，可以使用 <code>draft</code> 来保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new draft <span class="hljs-string">&quot;foobar&quot;</span><br></code></pre></td></tr></table></figure><p>文件会被保存到 <code>source/_drafts</code> 的文件夹中。如果想发表，可以直接移动到 <code>source/_posts</code> 中，或 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish _drafts &lt;filename&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文章加密</title>
    <link href="/2025/02/19/1-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
    <url>/2025/02/19/1-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3c615c135ac6a268b7a3cb2f40b3bf04e1c7f4cfbd37a67f930b6f11d401af91">bd25ed9264b080267271e137e33d0ce1874c72b7e3d7ffc49271f9d090e14bb8bdb8d36ed62129de2ed87ae853752e18b4056be247f01e3f5b92bc2f5d256107a512109231a7ebf4729f7afa0b2551ba411f6ff595d8d078d8a491b3bd263e2cd4450580ac8e88884e7b4f19e20dc80f77c6f0f06575d941f0dbe5d3194cc73aaa07fb2b15b9bef0f57131c6152900a4eee1291fed784f0341efbe434953195716844a361c580104546f1e0cf6b8a9f8de9486130fdb8f7d5a23c5a74bcb2227c13c91366260479ed55f90cbe3aeecd7272eb477df860601a73cc4ef1a666b8623e94a0ca49a4ed8c28291b14b08784ff9985154639640034876725310c48321f61b6603baa8cdf451210f0697cd64923e7aec23328cd6594caf6888f6243eb275b37c4a95adbf349f40730a9c9c13b9951a872c2a09d23962c5a682965481773abe6c496ccd5d62e9ad0f008ea3a9b729e82c4439a4320491be44306e2b67c8e3c3194f4c99aed652388aa42a4a2e87929cd5d770db1729170e2bc18b8b38a21ccccc73511a222fab4d5abe524dbea220af89f5f425c4dc97f8c2559651fabd6f2a1ff116b645aafd27b46a98a8eaf0f2b1a308034d8b8f8967e4c81bbd9cb154a18c01d6f49df7b21c618958e17e8732b05cc2f0c10885701f5adf7f6685904eb69e6e39f4749f4632961e55baae6c2da687ae3a3e8ba34c14383b82a3f6d22d4de4a0951f5e53c183824b920b058cd9f24726d6cab114a2e83d3c5287d94bc0d67d7e32f28922df1acfe351e605fbebccf211dc8920cc1a2ef2df70c015b29b37e199f5bacf787d2613ed3543d9fbe4a8cd7fa833ce8fe66eb7ffe01a78820f0ab6bffddf26c670f6da800570c895866c80907f5f5c1c2a7a76fdd6ad195650f1a7b4c81d7c6c5bdb951f6ba066072f26da021ce74d539a61140f8273d7eac87ac09de823cac538e51450d68311d4622ff46551ecba0bc7f8e69cce9c3d72f5b358c96cbfa4e751bc777209d2dcb205e53efdcf8533bb46ea91163544d8f31f98ecef2968f42b2f5847bf8c6b9abab2e1f50299ddf13a19b694864d928dcff00f9abeedab21dd1a7db9bafbec2b9a0108db661d1a6c98d372f9f44738822edecf39f3575d0c988cddc33e6febf228d1a1b31427e6eaefc25d264e92e7a31dcdf3bc8feea682180b5fd032868aaddb6ee9507f212bd45cff62a00c04c16d975bc5d42821928dbd7744db1dddd6b3648e3e2377ac37fb4afe693e4ba8947576b0d0fc137cf47eff4b8c2bd710a5222a0fd10549a34da77683a0d2152fb16499ba6837d05f9061910d46e6531454d9f4f273edea2fe1cef75f30e79e99aec188e4b9a03a99c5c1db562c0cfc4aa99003281e26d06af8fe49588898421f39061d58ce2a94a7b546660fc1bf5e87a729e595217c2d6fc5660b1f0f25470dce2baa883b9a84e099191e5fd7d789516e5fb3617920a34d9a181ac0918eaddeb486087c1a5ac6fa0738cf9d47b6f8a60d2606dd3cabfcdc37cb97e220f5f14a2e566be8b8308382230bee59e72a80ace8954690aac186be406cb6d202de37b9657cc65f52c16585c95fec6fe1a2a0d0d8b207a5c28dcd4ac702468d229034f7e3b3199a883415f8942f8f1de3aec80b10f922448350a873398eaaa6f434768da8092b4e519efb3c22f2b704e37e037badeb1bd40e89a1f63c630abec69825cdb75663d953127d17eaf1527cf23698e0e07b55af80bbbf076f3d4f6319dd2b1a575baefe09bcbbafef3be4217b912f4d1fea12dc01be41035bdae09b6e64aeed9a48d7bc8f064d11adfb28e68fe0c05240a048c6c303886a3e458b9d8c442b7ac72f93e3b6a9cb9a9e9819b24823e1a46269b6ba9f2d9ada8861266d5efdc26d9173346c067a145ca0439836ecc2bdcd8c0d992b0124d59556d85e88db34c754156a72050c72c89bb4c35cc093d54900034f2cae05d20bf5a1526b5ad97f513af2bc793434c6e8de155949f20f3a33bf51e328d85172da08c289b30f6e9173a306d1c721ca294ab22a899b774d46b5c28e5ca4648b63629ee8f4829831a613dfc61de8d25b95fdfa35244e5a5a5842df1cd97da407d5aa02911df3d258173347e1c1c2e8947584d4c061dbcea992945ddc746615de5d95c62216dec426327a3da352aa3b25923c36eda268e7c51fd48f5223ca558559cdfa4f31a07be9731599799ad98570d446eaeec624c302e732b4cda4c7ecb801cec6c86e8457782fc2efc17b3963d7db8be7ef140792f30479ba80b69da1ef591753aa0b5e3c6b51ca7e1d4d7e60b5d57f130deb5b2e6c92deb227ea7e30f8d56c05b09828ba32cf19fc9ad43f3e8826b87fd3dadac6335446ab9ca7dd7ac67bac7e0e1cb0804920038c9d3c671820172b9f5720f745f62fd52077f4e45c60498c7288df660953ce9a49f082b8e86b8edbdd0d1680cd7b0f6d02262d561365cbfad71609b70ebbb513ff57e6060e369c0a7451b701cace27874fa13c4b4618abdd163c902d15032d7f85a9ad2f681674bbb1adb193264b9c6e40b519add829ad74a0e69e7be8806e9d9c3147aeb3509f9f435607f6d5e8a690d63f26dbb758871569c7f2fd6394030d94c6dc79966ca98846ecb3994604e2521cfbea3abb82e6208905f53b2177bbd5cadd4c801b966d776cdcb945256b44d8b2ea6fd8afc9e0ff71d59b115b0ad05c378f1acfb03caddabb07d53a50dd010daf2657382c77f5fd84d5ff008c0b98748a3c6474c71faf4381ece8d96e4b73f5567ab8638b033434d721fbbe37722284435f886b830800ddba0d8ef1374df33c2e45cfe040af020dd7def05c15cc956072fe736786dcae21cb9b59037437101e569167e17d242b1e55263a759ffaf5704c2feab11661450093e54c2ef259643d201658c835372d6e0aa65df0eed1629ce7aea00bfe7298a90db0a6b5ccf6cf801ba7f1a7ce71852414f5565e2b71d5501c6d24f54bdb6ab772b9371d442f18c0be40d356e45a8aba94d38f577c14fcc03dce5edd1910738fb9c8348fb3ac91f27b8249c3d99bb2652592d020a8db57ef2826f96f1863ed79c6c655bfafec0bd511eceeb66c0a4592dc997e917ae42df51c97a29b5625059ec6fffe58ba81f3f00c3efcc3ec0f5886f6fe8744de85bce590f195e94d829261450aa37e0a67b5df81d34c458abf07eedea586560954713fbb643ae40904c6e65451e342e3cff68d8b349f5ce455eacb1779508a9ef12e9805ebf75b69e2c08f463aa1f8adcc822664785bc164f3e6e298294f94b05840877c896bc8800e2b16841349d8fa737cd0a166c0657fa55eeed238907bc3667d92e2e211c3a05f99fcaf4f4e7ee5a48d512d796ca479fb85097e69d4c901bd89f8e1b796ce6ecdc318a24868ba2a5d8e075bdc1fc3d168cdc951be66504c7f3df1a85d34549dbaaa912ae413c452bcbc05cb43bd19343ab8158364baf6b493f7548f11c913110ba6623aef7e861462a3b2dae3e54e2987e8b0f7e580f1900d398f1d5091f28ec5af40a99342010509f5dcaf972e9da4d17f629743bca60a8f970a9e94ddd7d2d09444272c34defd4652d886b46c785a922e64b662ecc5cc4106d4acb3c0989aa0aa53a546560e2f6ecdd359c9070d12d0946d9a059156a50d83b844c7c8d1ef12f71ace640dd9f9c256eeb13e40ff4e42bee480cf37beb3a1eaece3a96eb03ce2599374bef9335ad72a43d01faa18b56d5a7be9ec869323489673d741f5c6fb4040c9caec4ca445689ffdc4b7c5d8c2564df547b1f5e42c383fe5c37c8daacebff68e56b0bef5756f2fa7163154c34b667e4cb462a0ec09801404a98a526bad7e4676a838b1ba0451be345896acbe9b6caff7fb0798648bd7cc3ab162574265199ab67476f48f3328a480227aa49a07bc21a8ea7d9e7c352435feda2fc3b69dbe2179d321437916356f993db54a4850a319a5a0e183b00dcdeadb07fbb7e56e65c0f820ff998e874601b2f35e39f2a6884362e1e5e47f98fefeff020315889590cb654e9e6442ba7af4ab53f980b8ad4d6c9d8b59e5fd539aa252b928395dec0cd0ee515489e54f2c09eae30ff6bbae76a3561ace97f9bfc9ab6c52a9b611c0ea77458fe62b0d7e7e563f4cabb66853bbd30705b6f83e0a0792a9c70bb591aac06926745cede7bf258bf2f083f7ade73874c95b5b0378dc1a09f75fd1c28f16320a6da86d75b95316ee45dff5b2d0895186fc506a8b529232805ffa40546f27a8dcc15999fce118d484c7f566b3478d8113fc18acf9be5c0e275bd57802651d6d0aca658f8f80df09b9ae205bb8b7787c3a0558c51cb44c9034f7876f6c42aa6f8c811fb8bd14582478be0f344bf7ec89ca993c5e44b9aba251175d8f262d7db5fcfef01008b09b71a488f95427207400ca342dd9a7fab0eabeac4056da6d7adef297f624613fe710b67d1c8b0ca8e8dbcdd96414ac5cbb10afb77e9e4a0f424fe6283895213730b0b37707fedbc72fe8c4e89932119bc0cf7a02ce2f358a76a764e70301c06c95e67d95123ddd4b1968677eeb9219d91afee60228f92cd743f1f2ec98a0d10850383a1582d77614069afa1da7148274720b109361166611a33cd34845fba291b8d8a1390d28795bd7a1e9cfe3c9e0aef23f4471f78833ac95d3f40756273b8d655bb4ab348218b9bd840b7a6b4a7f87a96c27885b9458bf70dbf0cd1c6c4b261342fc4080b99b9f239ab6af04011004da4732df04b2527a91d06cb93aedc5b9b2220ab5567982d18ae1f58faba6de0fc968b0db4c5a3f3a8b8c6cd7348b5e9eff371d97c45cb90ac95d4e0278b582c4ce5f3ade7d3069e84e6baf6c14f1cb5f97acd6c7a97a85d293b313af78354180ccc3906842949a24003413f10946a5728bbd74f5387c3616889dc3c901985933241aa9caed2678d8747aa3538ca6e5a1bfa43f86172363327f477f772df990b296bc36e081ecff420564bfe681a48fe5f23a3541b8128f27e606a1d5a32b8d3156f5e94fa9e38ee9686c6652d821b62b676da49ec5686f28f163311b2f564cebe3710253a68399e5a15fb3733a78877be9f71250b839cd5a983e68b98ad211dae33b7d319992e7958675debe941a16bbc9a9b1d80ed015c369771ac518030fa8573e3fa16bfe5e2e12e610979c099195c1e80aa4cabe5629fb2640ccd2a5aa86cfd1fe077692e4b395314bf81c9ba6d578b1860fbf3c909f58431122c8567f17ce7b071e31ddf93eeb087912b26c8bb7bf9ca84e4cd92c9ef2636cde6e40df8058532a3a72ca7f9a11cbef8ddfcdb466f3316ca8203e19c35bf303437453620a852364492a148155f63e37201ea15b0397a7743a6764e3ca7a2ab89526d9a7585c3f36d7aede5bd8decab200613bfb956cc07c963781da9f40b4b9fce0a3deb3ad9e1ffcb23806ce3651335f1e71536b3ca7b64f6a67ba02be2a70209f214bd0f08bd0bec4beef11bff2f3145e0fb4ac571f7e55c07a36411ab3656a4189d60d14ca886e8a786e256a30dd8bfcd3745e028aeb0fe85caac5668a3e78c54548c68f64711c9b1e6d0d1906a5103736180b402d78955d1c4065f00d55e02ac8cf27ae042b7cb0379b43cf0c9c5baa5f1c57849cb1cf6000a8df587793ae4f7a9741bde2bf7f4c35bcaa09d353fb80a6bdde49a76592cbe3e36b42afb67e1a1fce242aad325495327a82ef05c8ac09f5316d2706fb3fa26bccb97183fe0a6f02c03760a0444cf64fc65699292624ecc0836594f248df04165a005d120e97702f79998730746769a9d82081ff8229aab0730f9d7bdc71918a60780f3a760f2b6f591e5073ca56f22297b3c657db82a5ed61270fba9733309b83d541a49930f046d76c239d14af2d05214f098f5a53f0073db39490b05ef9526a92aaf478f1fbee9a1a9cca8e483000baa679cbadbaa035705dc49495dc10ef2e823cfaefdb4735df26990b9499cc71e3cc193b559d070638a44ef94612555e71120c866a1976d0b7c4fbca736671b66c5696ad4044766710f64a00bcf955ed35d684bd15b864bc1b75df0a7354af7d219599c3f7fb11cb185a5cfd512ef3b398ec8ae2dad7dfc143a3f95e5f1d3435a3f7209c460ecf60bb4bfe0848fdab4445d99935a3efd9de60b59c99a193854815ded9889e650f162708fe17761599ef02be8f9d08fc3d837f244c41b65545da304fbc6d552e6254c7cb30e1dcdfa15c1d442587842fabc4323bafd029b82d23623165b1e2b340b2c6350a7289aa47f7796003177b8f94cb312a37c804678c7ebfe20a98cdf1bdbe880cd98415c26e10e76745e9a8ea045a90a82e312659604a7b232ca6a528aee967027e299e1500efe447889404f4e550ee14355426136588d66620419b8be00e2b017a5615e107f2dc995bc67360a8e8e18776184a4b84c7784ef1acc71f1580147ee4eed9b9d75cc0ea3fe52cc8cc12a643e282a69cdb00947c39aa03e1e5bce2b167049837508aee679fc6f32dfafd77e8bd9559537dfbb84478536dfe959ecec478262e570bae5587443e6ba7c41099c6ae6065ad4a3cb3802af84929d926f08eca93a666becf570aec5034ac3c46e8c006b2f6199b9f53dde09729817f8b243071086b3e0ba4e453a79c0b5e86b1d7843c67d7d438621633391b752415e71492f849e183aeefacb6f86d252dc4522af2338c46ccceac0ae18871645a3bb9806ae17995ba1449bcd1341da86119f093ed0d142bb0c537c9c36ff5ea27b87da16ec55749f8422a78962b6f1837e087bbb5618c6c1ab32435faba51ef5e88bad3e9037043818e74b7eb9ba287fa76530802e056e15e00052ef849b6715ad2911715155bea851692660c28be91e410c546cc8841d442ebeb39276b4f62dc8f268e8c30381f2cba8e3bf15cdc1af54db0037462b041e451bf467f95b56be57d38905cd71d70da061449308b79e88f8e8ab838f69d8df1a6233f54ec23270e74339133801407af3a67ac062df140405a52308eddbdc3811d8c36e10fea91e6caa770557ced22e90a650a6a2a1d5c653231833d49a223931a67f0b51608412baa5df7778c70c856ffddd290a56f3895f425d0e6c0b3f1f764f8de95054c6c8cfeb711d3258d22d255d99df2a01f7afa02e813b73a8adf7c7edc40d8c374a62d8edba051893922f8ea1f2eb9273579e926ec5a7c1a12a71fb79587af760531d56e06b0a341c6419b43b912c3c063e618c88667faa441b2b82def95f3f31b2cefeb6706d174ddbe147d0ee3ee572cc641be73aa82dfac52850f78e462bb4215fef5423d9f2b095c3cdf483be24fe36485a8df647acf00d4786a31528ffb34db611adf2ae81e00a78d30451a1f88e36bfcc717c6e7230e458e2c20393883e6b84981883dc20042d0035e8218c414faac7bc433265548ae49a297eb2428e199d23cf9c4b1d02270fd9885e29e8ac852bf19ac986d67322770f80260b7111b99a8f250a5bc7c0d709133db49186683add25e4819c7619b4ae817b6f4cb5ae9f4a4d775b0547720df1ec4ef85d2a6b4d9f1187bb6ed2fa862bd40b41ce9a873592584b630e8cd9acab7a6695b412e0dd4121d3c50cd55fdf076d20e41e51689f708f80383d9b3797938b0ea9e2bcecb3480a26ce4a4befdb6b2c101964f7c7e074b63e7ffc195ec34ca0a7a026c4dd6649c060ff474a3157e6ccb898becff33607a5103ea0ba709d41602157af9270c1070c08e2d8b7657dac837ac88d9ea1de8ce67204c90f93dd04e782ee24a4ff4b7b788868a56f6f9458ad6b27270616200fedd957ab4b923746a48d2ac1a0b22c37080939db0a940558e9ed51743e491b8831212a688faf0d62e38bc70d1fd588030b3729d185960696cc9479c2c038a2c15e4164255d40d6778a0c62e802f411d1fa4b32aafb3351781bdfa51880586eafdfe5bca22fecef9d4625a66a37f7d68c8bcd555f61e250d425c257c71b4eb97ba3035eabf66ab9d50183aeb63aef50414edcac54212badf757c4a1fc5079ea8b82581a7e4c5321160e09ddf1ef69320a69e0bb65bb083a804ad3f1f68875b63d293d4d8231b8ef9a395dc1017119504ef1457dca2e7c64dcbb4eba7306df11797c4365dfcf89ec9873479e3c422b2665ee2217cabb5bf575119608a59687e9a1e1a102445e65a2b0f1f5a6481a2c8fc859e0ec695170f1273d489be294a7a3978c158bbfd8718d08735e362e429c0cce4acf88ae532aac3ead5679b355f2c085c6785069ea618d7625acf7f4ce5b715956b9058adc3932eb5ca2799d9ab29fbe24581826faa54b7d28e1eef36cc2dcb336a1bd338ce4d617b28c79d3c8cc44527af1d0b10798e6355644fe22381d4a36a5820a617c481b884320623d9adc29d77a3df8e6d215bedebcb1d87fc8b5a46e5069b3d78de0cf537e36da846e41f524d070dc956451c3a19248b22c5eb830ee0769a4a3c39fc3a2e71801624060be5715a341c56857891d38ac200495fe999caa7f7d0c2fe48c9a8d494ec36d28c157b7fcf3db243c51e7fc6f866d22574a81eafae50c80af0c8e917d02519cb5388ca37148cfbd06134cec902c5df15254a0e178654a753a74a763dd83555b8604c64e177a226c584808d0cb941f907c087287f1b7fca5f83b719daaf92efdfbd895f8b557957ddae04afba51e409822f933e63d94ecf961d412ebef797c781ae9e214af17ba0c2abc5d8aacefec6c70fe9c37bd3df707907b25c656372c4c27cdfe17f8565087fe3c5e716f84139d5f3705d65fb4c10fd7580bc9a148a8d17dd8881d4676b547a7ee58cd6f25a09d7b1820025d3b77ccb98d7ce3a6f3f61921e155508572b1ec2fef88cc1e5fe087b99a3e9af999d4a5e864c20e35bfb67f0728756f6aa982fcd8c67da250e8a08272fb6d7e548eac59105eb0e7b2f13400b1f10236fdf747717f4a2eb356b3180150c53b6ab4164610d5b35e4bb57bbd7fadf98bc21aa4d6eda2feb4a4059db1bb982be2c1188cc3c1982ee64f1e64287e4a1d74432723495802a0b6119b98c7c5491d8977b2f1603ad547ba2ed1273eb27e62ba0ad6717e292e2806f5c1dd3a2ab4afb6f41ba740d604144300b82f545aa007c3e2f03ddfca78660ac43a35532d4abbe6d4eeac2268177670e8fb2f8af04e547141011bba3f1440cb379acd6f925fd204625a37db5645b4985c00a3a1e7b970199b7d57c0c8df5b8fb717cc8a50ffb37a89b3c3a5ac85486e2ceee95c3b94e59a304b4e344a4b2c8ddc1a19713124e1e61e6df3fcc0390791b4373f3b9714f5cb460f31da680c95b5160bc15bedf16c3da735645b2333ce8c949d6df0e6d02f20890c49db665c256063872fd976ba1dc762e8b7d5f7cff0efccb651ea5cbe36a2883b1f62a48adf1f4a7c67975026a1a6a20dd9a58c4703772b357a899662bf1db0be6bd5d6540e5940bc01409e0b8b2dbdb34747c97d7193f1651e0dbbb8316c7d0a13cb6ba706f460246b002d6bffb3eaab62838a4ea4d85af569f7252c7713ad837b48ae0c7d70d9c2f19f40faf85a35c0ce3ca076ad5e9eb962b53b057a061e60295dc4353465021a2eb4c12f207dd5181d2e80aa22314be1c2e956cca7d0ce46d16654e6878a17c54ec2f61df1321ea72ede7f9ec05cc2cb5f6f7fc15edb7e429085b931e2ee0a04a5508437ea939bd9038864cce32d1cedc20ab4820f4e30db15c7c3cca090653ccffe5f6cd29cef90e5672e8d92abc2cc56c58b97953d873f2147598ec4f7f81cd48897e6999042335c5d93fb22f326470be4f3397af46f5f87f8eeea3c17d0d12fe69e4559de632aeb793d78e7adb3344382109a4c634b780f97d22e30c345a3d4167f8ce8a65502b5c16c7b54117d66ccef6e2fb294b9241350e33fad37cf49f075b1c0edc51dd331015027b5fdac29d3437c95050bc2f473d6be6f675bc5597a8e5bd96d155eb974c01a4a5d8c650b3ee052f2a5882176d171b00c92826d988c30f147fe04ec279e4d05e72a316f5e172be874342172f97dafb098a401f3d710f2f9cff626a6152168d9aa61fa2a54ffb005938a3f5c68dc0ce064ef32787760778ed9408b36b109feeb3b41b6a87c01d8bc25b8b3f35ce2054aa88920ce6b8bef734efe39a58bcc08adbf8d6cdadb41b15c56137e006d9030f057ba8d3ecfd218993320a739aaf154a5adbfe53c5dff134f6b5ebf95804427348a3e612cd7803cbf4fdd619bfb7c7907b75987a6cff768baac8f7c60607815f03b820e09fd46cefff3250744c885a3e36ddbd2718ce3ff38ad5e943d4d0b7e3223448ba79a926a9481000b7abfedef3f3ee7b860b535a3ca94b8c7d6326a8ef92685d590d8ffeff3c9c295149741051e4458786afebe5776093acaadc89a9adf5f3a8f5b730663cae20f199279f24c75566f70b74450725f1dd951eec60a610764920c039995e45d0e54b2092a4bc702a95c20ea0dbdff862aa586b0f81698151537ec8373b395be600bfdd9f497090c461c33d34cfede50022fcda0f8677fb7aa1eddd0d8816a9bc989644a46db0f98862457b239230bfeafebcf424ad7330842071761b2fc9b1681e9badfe99d9aae93acaa4a3d37939e6802e4736637c8d784c3e8021440eb9566073eb2dbfd0ae4c78b3f83ce039317a4832a3f66b08a4bfc098d15864c28cc532fc7734dec5971f5365402dfa3e2e51da47ec5132a938cabd4ffd63415358670a19090fd71cd930d508ef13d0f0971cd72b6a2f50dc9a48136f8d82a7d33e6506c61315b7e607a249be98578c77d16ab295ccc7f1961dc627496535081e36e19980d95fe35923df2929777b239160a18212c7f726e4067946cc0cd13a6b09d82d586d047d7176f6d322689c66181fab7b556e58f9fd24e62f70198307704f989944bd1647b90edd098d8a6e05392c0ed2536262a85559a5c18cc9ce087b54464716bd8a98b406dff59ca146814146033bb9fe60dc025d3f85324a9b78aa7956214e4ffb7e0b56f83c5963f78c5bd6d280ddd99186d6b625eb55c764081964944bf2ad0ab69b08c799000de0e28a07ccfede618a64aae5b630a5e1e514eb974fbe2e48ccc27cfb51daaf42400ebe78aeb652df563004591bc38b863ad8240c9ce1e3e4982de7a72cc678f0e3712a7b7314122623262f2595c0b696a325b0e7941b675fcf98eee80ccee36dc1f71b404919c41b4aff0cb6dc02b69f8a94b4d72d2a30cb44b2ed0f73c7e9c7cdaf5052a7fbb7fcd7a60d5bdffeee68e09c64c843af1f347bb0100ef0ad30e4dfc443103b87442c34b02e655d8c81565aa7f5cd8288fb6907f523aed134f87ae1c1c82aa7c39d96507e9de0bf8de419f6ab1131eb6befa5bf2e7a896d7a7a0bc151bef15711232f0548a9d7482dce66404769f5f795e57c46ddb09e1b2063959b108ba9ef4a325f26c25ba1b7c3d5e33d4b05cbd508aade1655951b71e598d9574cf689074dfb5de2296ba74cc315d10229c44cd9ba83368a181d090096abebb024dafceafe9caaaa00511ed93b3b009c757d29da66663c09fdce0537e38d32cc9cd8b3a5a5ea9f9066fe0fda0d15f4b2287474d06a34437000d14f1b8352864404356e31a48cbf79a98d33e5291b0baf6bd2342723d9447c5a8de0b5c1a20f3751d22888e20af2c6f9a020e7ccb67fa61b0d6fee64d1107ea978a175bf6ab40635f81ebdc38e1e01589cea0eb63588bed4ec65073e04184326148660c54f4d2498de2e8fdf83f928f9092b8a4572e896d5aac64913f66b47912f9993797ef0b2d858bbe443124102701a798a5f1ba1e99453c0d9637c7d71d62b722406b3271ae094c8c85505226b55cbcfd9782d2f34552c322ad4de5d1af8c28a442563cc129efa072329335df3f86d191ed9934e9ad736579c0b35b91e591464e533c431e641c722ac5a09adc8d8f4b4d5f322efeb3d6e3d8dc9404a6958180c918f95d2b2ab657b702f0dc604f1e3a7083f6be422946b57f9f63c05ce78f5cd86bb50e8693b54727f745438c135db69b229504f7082af7079f7817e232e42406fcbca5380b02c74cdd7e3e137ed567a485c511242a5a864fd0cd8dbacf4c74060da4ec0b7715f012e423dc070c0260588e52a2793ada17d28cfbd067b186ae9bcc0306929c963e60af90fcfe4775ba25274a61397dfa7062777b8e09be60e005267fefc809a66a3ae2023c0f6ca872a57f4a8bfd40f1aab2167f9c07208ec43f2753f5b67c86d5364ef7055e3f20aba8e17fd00c37bce94d104054758cfa03b8d2f7a9977d62886c19a39cbfd4847ae666ac1f4fc0ae1daf230ef34b57cdde2c9bf5b604dcd088c68e60e86d955f7813cb5e8631c13f7ff235374f95a314109b4431803d52ec6d9281af70f160da17c22a3447dbcb3ec3ad403eb7264c0ae7dfec002885d490c005c1309c9b06a3fe14ad1079e3ddf9987469a61765ed4c5b3cde6fa3949555b7ca0b6a25de416f4a08cd527b55a871622c1c6aebc08b99d32e27654ee5ed52a3cc036ab8289a28727015ae8215a001b1b59eeafd04f9460e949251466373428724f23270a62cc444015481d9ef0824fb8126525f0c5d7037123a6f76780b94ab200e3cd198544180674bc0e508283f18da68c8b864679513aff2af6357e58323b3f30ac63f3b4fda77c6ef255853532b131fdc126b9d72103f1678f9d903625ff0198bac1f11c99e06ef690c75667c583389e2170938e01d2aa54ed73f4f526a1faf421bb788c549615e14d67c1cd6c99b734cf9e4515d96986ae38ba8b4295e80bddf72f57de35da1d3067fff016ac9ec795937cddbd6bff950856f91de47b70e9084481e1f66e289f5663e738f003a9e754b14b7dbcc67ee4c65637832f662737c7867053c46f065a725ca00bb83fd1d413191b34d6be3b55e6ccc83b14f98c2eea84bb655904ebfd40e7837dd1139a79caf6d861064dc5267e7a5b5f49e1ac73592ec86c51d0ff4e368f299397fc8525fa76b531d6b4545d7a58d687234d9eb1e0bc7bfbbd7cdee38be60b04cb679de5847794fbbc754fe86a5e1f820c69c14548e4c1ac4fbf19a0902ebb194c3f2510107fd1145205fd56d45c19a4e8aa1307fde34d0a0b10272a4391dd5c84a1d41f923ce2ac86f9e9b7632aecbd2586ac7ea64f560b6a6cc3ff283662cb585c82cd72cda4967e7ea35432ca80c809e0a7e75defa5a95469dc870b5f7bdfc0d19c276b11ed85034d7aee7aab2eef87323c5c8520a8b33113203d73e82c135a279a9f1a70c02c719f743dd80758639a1daaacaef9d59e374d1e0cc86bff960ce33a088a48ee2ff17f2795fbc13cab37626862be71f39642041dbbdd44228288dd77217ebe792f89f746a1a31e98fda17b11bd737cbafdd0df1b77fa506c1ae8410d892413b7a2c46075f32e84e95d1e655cf60430ba2f2e7912dc2909091f6b7c4eba5fc7d1c7fe9d313b8c701f10be717de36df67c564f4bbc1cb16dffa9cc595c0ba5a09e95727a918806d0a5e9643a82ddd39ebeae95ff7f4c092e734e5980393bfc4774328af2d21adc718796510d946f825aebc05fc921297283efb3a96fca3a7cdf115c56c0abc070c2a09e7ac5f5c41fe628c14bb36973662e701555a3b59dfa1e208508c865c77a3e4a2136e51ee515cdb815ed324982bb7d891ba23af64682bdc1ca81dcde54420eaeff87ea348de4f0f12052834464494459e82527e36c0e7ea152b06f7ee99025bc20557da3915c5d3d7b902dddf9c0d4d6d292bd2686520bc541ff00209e0a01953ed134f9141d4cddccb320d0a5b09a068ccf329b2c2de74e1dbef0bd7140f4fe536fa6670ade75ece53fc8256cbb5af1da34952f10a4db68a24047c113ef40844d9644bd99e4c613511362ceef870bc18c6e04814dad299e34112692a9ad943214137f5dd77b39c9c3c311fd9299d861e7384fc0c774e5d8cc1b37ab45d89d367c292d8e36bf1649397b3595e60bd4a673459e25e9ac71d8d79daaad1856a302e85d777e74e67c93c1e2dcf781f589ec7c003a1be6129c663ac2e0a93ab680d26dea990822f9a592f94dc16bd006537ea6576e10379f9a8ad4f953de95dce091770adb89d681912464dceb468466ea91ec3a06bf8288517fc11cb5e30c0a41b3f32662e1cbf92ce098df58199c23c8333c21a3cfe6736c2eada4a482e36a02860d6d07e8542d767e6c84db24cb172058069f6803c6b3c30565ff8d5885b0d185620e9437648d7259ce8222f59c74f1bc460dcc8c24854f952547ec52a701ff40e137c9a045eb5af4e1c98e77779039e599ef52a6641f2f1122b78b6bb91dca7d883e0bd6efcc5f6cba4e44824849d2610d0212e6a961dc9f271f20ec071090bd17e254c2ad98d2cd56f82f9d1c486f71992017347a2fbb6401dd6b6a2804c2d4a8ea760278986d60ad81741b64a7bcb6cba160d8cc534778e31beb1cd69e6cdcf55bc6fc442402770c831c1cd347bd7d2e028c8cc9e4ce82a7ff4f3aa97c22572f448e994c29a0ee527dd30c41fc02518d832182da85bcd6ee08f58659bb1aaac9933c867acd71daecf5fd66d2eb44c130ae711a460d046fc17071a7cc06828cd9e998bd2e9e0fef9b3bde02313937e59cfdfc55f92db243506b69b0c3131f39060db88a0ff189dfdf79692475619e69adac58ad5b063d07a6a6254590d7f3cd4ac8b91743e6a3668210361a893264438e4d93467312435a4c97bc40be9eb8da58026d1c404a178eb0eeb6c8f007e2950088b24c64784639cfc5b298cf91a20f8fce70620c064178eda618bbb51bb97e2faff804e21322602968fb07931677c047b8a3af195edac51f4383655c218a807a0a4e32beb40ca602770bdefe1fa625261dd505a7bdf62f100f1fa1e7da3e437d91685acd424585cd819bff865572249186673f2b4dd33a65bb14e2ee6ec94ff9b8ad5ade2e62538412187e73caac06c4f3af4cb18ffc86beda099da25ec873e24467eaa04feef7956ea5d030153b508caff5c6ac68dee98831bc5f5e69ae6a911df8627fa547c9fc478e1d0b77bd4cd2f09d73567e44ad4fa5a5a8a39b6b46aac9f3302ab37cd7375a9bf260507e44d0e1c7904f065c7b380489afb6a2bb9ee9eed6a5b31bab87d3c6ad1d3f6e404146588a3decb6ed15d45e4cd88427ab99d28271a873de2552eb4a5ef29dd614805f3673b8709a0374ae06605d8970e9c4ec7f6a6bfb86168e73be6ffda70dc5a172a8b54dcef7c13efc89dc43415a7a9a0b470816b2dc91fc951551e87c9be62576a40c1dc2d7e59548c6987cc100a4696d409929faefd530bcbf5792740e361bcb1856a4c6ab40e7e5bc8727864ea647914290fbb209b45c3d13f1cea8aed4e95c582b6c8987d3f25099a3a0c88d5dc0c9079754d0e3a261f331858925bc9a73cd14b9d6ffe55af94e35a849a03b460a83eae621121eab8ce82044d316d8ee3df6306e2c6b55c3d96609232e001043d7802b274f1b53a86f5eb507c1251415805ca6d95044981921eac1c72ec04a66f880e785e99576d20eaa687a00f494c984d56ec0876bb3bfdcfbf396d5582e4336c8c1f94fd06984827f740c6165c0acb393ec8111978196cb1f45da49cac11f8cb79ef673b80daa98d09f892f2c04bbb98d371babb738ca7e3aea1b714b8c3a579aa9292dc57180f0a3ba0d3f0b254c59cac52353da2e4d8347acc5f4012cd97aa5be949b41d6b0e3a752c2927b19fd72354ad79500ed416e9882049569289a6b2991629f3a8ab839d2d1a1696c9fcbd870d4edde6c1b5551e2d32f31ec5d9c7d55a6e9ae900089100ba47c228a50519f6bbf5b4c7597614c5cb25338587917b1ed254602241845a937db026c03acbcf25c7bc2609c294d18d640ae42f1f945640c0f9540a0a7eca211ca2b80e0273728899b8316c75b9eec08b71cc32b11781c384dfd8119dc550baa1485e2428511f09a1ffc5d206f97ea65abe236b02cde47a09d061267d89929da8172ef0abd13f195e27951278bd5426a51d06566db172951f53ad97502ee00271724d821533f91e9289e9c28fc0573d740f5b2e74d70c1336646730922ea7933c0ee8d228a1d3ef07a302f68208def8484a59225f6eadbebc4947ed89505befa3b8b1271fe3c321a2b9570148d2ca7943c4f7a1dc5f7fe4277f026fd8b7019525d01156841b4b60339991ca4ff69302ff6d7c7d8f091f5d5edda11f26ccf9ff5727094b078ec7ad0dd8e123e89ea9b179d6347c54e0b7308c9a2b412781b982e5c452f839a2497ac1a0f27924677dd0fd589b6758fb6e2089c2d1b8e93d582a7e200a83d4173c07e4a86a261262f06c79088d84de0a03c1c98c2f0594464e8ecfbc3d393c73c0f5c62f9a3703f799d85b8eee9ec9840b5aae8331d1079daaae1cd3f086e5b3e8eebe46ed15cb9f9504ebb8162cf035104b948ddad4815344b6b2b98f89c03d47aaa1ff28891e4aaa9c1ecb67a6b72200567eac638d78691cf839e75fcbacb62156032fc654c9e463c21118c2f0da8c59a8fa9226fb1b5fa99ffbd386856c4920c2a14a8393aad6b79a92a452ad1ca6dc110bdf58a48da41a110ff91964f24e18bc95c9b691f1723fe8723374a29fce2865802f6bdd829b0670ab195c9393ad4d4f07da85ef1f3449d4b0eb94d98a422b9d940575bc70dd9b686c0832ae2806a84248346ace36b00344f770f1241cb68726a3654468acd9308ddb2168f9726bc35ccd60f43fc0fd6be4c3f9dbeb1f5cad92c683341f872f843d8f87899ce098d4187318b146424808a21b4504237805f957a6dd14eb61b2aa67f25f69d0e8162c1a7a373fdb40b60df674d9f8c02c9cb803aa3c294dc06db2c5309a80905a376d604c5d12f7ecb91d2be5881c0bd8097866cbaba1ab4a34abb2af1e1c3a1d92958888b683039a1b5eb645556967a942506f86ef4d036fc295337f14fb4e0064fdb640c7f18a10ec044f8c3a6df67f80d08770b5785974f2cecb336d55866c49237d4b35168c0058751f840f18983a10acc1518ef83d5cfe2750dcad9cbfd836dc5344bcde25888900e7a3a4dbffc293e2c8806dcbbcf57dbf030eab90c289dad611b3b7b6bd7e048fd22bea74db867f8b9fbbc6fec994f6452b5c485a340de43d9eebeb97b9b1278fe832fc82ac14c1410e3d2d230463f01c8d53b30682c098a3ae0574bc47c4a09aeba3a61322ac9fbf1dfe7da939827e2c5275327298613038d72ad1c09c4569f4c15826502348dd9bfea55fcb65c3c3142e734a9775fc5e54d99e851d7c67fb89244542e2a22922a09d06a4e99fab71d6d4d8e61c354e2d75f731ae6062f6c04ef6b435768ebd110688cb798d175672aab746a14ef1bb05321cf05ef8100735536686a17378288540c9db18f7b3ed46025bec0726c6428653c1de7264e2a9150f62fb0a54b3b641ea7f6544d119d467cc23f39480118a39b9390eb7d98e9ac30ad5fc991491a2d1263c7f08bc0d49a26e098cffc140940a8871eb86021b783f1b6b2ddff9a55708662eb03c49c8fbad6dc17004b264fe4635853f4078440eb4b131f70cca62a989449009a5361d3db8175925009814cd40dd799684a62b214ccd7a302c9b4f5e260bc5bbb977f6305632fc2730004a22ac7ccd236b86ff31a2fce535478b4f7b15a7a622068ac9f179d7de4e17999cf93736b6e3c2d55f43ef66d793366a72281529337500a12562f5dbcc622f7638affcdb8127bd01b7c46a690fb2a9dc2a5bbd64aa019f678602ea0cf0d8e6aa2d16280f35ecf9ba3cd0ac153927d247a3197324e649f59d1a9fe7b9c8925ea6025a6b17f7068ea64bae297bc4db9ce70a9888d527a52d9c3db1f278751946dc3447250cf1207d5ec0e615c5bfae1ce233f4ecad8ee15faeaae63c4244465b18020cd1a787abb695098b074d945f0b9862889372824f209bed692b3ce95d1c54b9f81d977115efd8489a889164b20cf28fefb75d979378ff24440511b1f78dd70ae05ce0935a538dcf67bbe8a35f4822188643889bcd9675d4caec5aa8ac8b561cf25393d556311484a762090155a2d288d7bf106dcd750d13264bd87a1cfba6519e5ca2d348cdefd903fd6db484b4942383af0b21c44dd01c71b13f0a8bec800d4a442a45bd254a50f3ea4df0dab53ace5af59324628c6e41d67b1c52c367eb01cbeaa7414a899c46cf108ef6695a168d0ffefc6567c1dd45cae096479bf431879bcc2901886babf36db584b0a92e0fbe9049e3507456658c25b5cd45057e3e9448b37a948c4cd9d3c26338c8f1de4c1e3d6fc5bea2a199cc49355440787adb8cc4610fed4743e331c051beff5b9e69f89634212a2ceeb8948fb876ef4a822219a300d56db3a4bed67850abb40d19c421f1c61dabad8defcf6f95d23ea839ca6aea99fe2546f900419a96b7960d81f097255c6ec0eb67a9ae68245070fbb43cd2014a2178f67f17ff08d38ba0162ea72827448225e4bf1c7bd5f20b6345c96c392bcc1dd63b446be93defec018625a172d3504b342674658de5951160497cb324b4087cf131e2b33fe3c7f167e15eac24efd8e7ba017eb7e18bbcc6863927e0c56b000e299d7ee50f322dd5c5c7cc8a617e0e00e664e81c8fa2aaf695e86261a547e3bbfd886dd43c949808639ce091a67b3a166d15b484a3e58aa5e9baf0e07d1dbcc160b72060d4ca18a3f793639efd832d3cc4df3a2231434e779e8a991365ab775fcb0b71c7561c3c03134478f78f4749641a1d30f192a58e245867cef54fedbad7995caac404495edfd0c382f995f856b4922dc8c382e1fbb0a290eadb985d61d9f5f2aec92f549fa9825fec32907daaedd04d2ca0053469c90f8107e5f40ccdca0502ebd99a1e59540891e296c787d69562ae47159759ac064cffc4ed9d902e3a6b789fdda45a55120322ba95c2c0638e5142b6f85986a2ce1c71de2d253e375c92a4e6a7de4caa814085d9ba530a3f203673bb97597ef4aa7de927a844c402bd974e4594b50eddee7942c264f69fa3bc8769822b4ade3bfc95a5847e72b268c479bc3f619839a3394e9da78103667f3a9847ad48e18ccc2282b7e3c7c0509a6b0b7ed795ce567f4066e4671aacc8e486c2d28c243068c11e321c987b519cd5faae72cca30874b0f2485ced4568128f6ea5e1fbe0d830306c33c02470aebf8ee378dd8334d3d878038acce38595eae3ed4a9090313d898fd75cecd01a083b7443ba7f33c9b4b2ba268c0524b7663b40c019793e20ce84bd1186c12f429fe4dbeecceb8443b5cda38d79d52a7f867747f8a0d059078e30b788c32c5e36ef9ae22c44efb8eaa2b00721ee798384901a519d47d241b6a7806e7a2d762aada36e5baa6c558ca0a9fdc662ffa163f72230ff01d73e9ac81fdec62938a843de912748a2a735d0ae7d27c0b8d575e8184935db73e73aac9e5a6e89a930462baea94e5eb701aeb00067a7f756c91644694d6ffe269f3498586aa1ec95d2829dda2412094a69c0e40a84f3a27d6d25968379943529f903de0ceb306a75916c36934397414b2feb14a7e5285c2ee784710e3ff1e628ecbbcc50bab050f95027e3c1c8340a78777f3360fcb1c4e80d6fbe55dee840692ad7afedab6f1997a06717eafd45a18ddeb39da0f5111abf915c46f03146f59ccebf33cd2abc88202fbe17afd0c84c2f8e163efd458c5cd049f00fce78104a11a290f3cc67389d9ce3c735da527c28eb190c1e99b72636f441c711c9914a2244aae32fca5e843432b07c9fd1331f81e993e375380bd18615c8bb2d37516bc9583e9365d61f4170242e4df4ffd434e263f9c18ee473ba607a14d265f1b40ef0ec40fb02093a366988361189ed222e79b4290096f2f7a670eb0faae16ead2fd54975994fd53bf999f42460a7c77736a23e7f7cb59130eef390d13c58959265d1a7f5f4b537ff3e5817349e11b12d06b3ef3eb78ebf2f8e8c887c7ddf837ef93ec4e7f382b6a1d2e31214fcd1a2fa8578b34c8ebcc5b452f1e57c294824bf332e826883b0506b3c449b620518d957322a1215ad8d8264010f2587c3302e07975dd5d4fb668c1625f2a5a10307de766b30ec033fa3546d66d256a248294962c211e30a3727453a16c8e9503975b97d6bac5de23d9f90ce5edbedefe37f7d0f8357bd3ace7e295897e9ed235ea10195188afec0b7df39f5b84062bedee20cbe40a014ae5f7d593afa9bdf6ecea4ccd502a750567320a516d783e83e39025c41db510e2818fdfc8bfb4a3c4373bfed3c130b880c71c99a1ebb55408dd45494b16867a67591911cb5137bfdde0975160fd6f035170421ef4e786f7c031d5f4f42c5f50784ba1fa2c20d8868fc42074465b20b2eea406de812d8a8f1891e771eea6d2bf8b171e2b7e47f7d573a6a8fd5228b70b884598fa291a8699dc305c70dbbe8fb6f7aafa12791a18255fbb8d503c36a989e24bace79549dd220c53e3d433e5e0c56f94fb767b98ae33aa3e00925942bef930ccf26a6ea85c8e044d04abc674c60d9e80bbe9b1b678af751bd53b9c4fd275f93d7deb46dfb96da33d77dc545a38bb22241782f13b1cf80d5b77b080f4c8670ea4b1cf36957808da21e7980094db25fea19575bd3395854774f463e0fafae372919e6a7c62ccbcfc73cfcb0b04418b9b92d7eb1d3d6223424883a7adf1ccc25e13179b84166aa4dec9bc1fb6cef3119f10a72687ec91f09ed150b6120430ba384ef3ad34c9fab83b64733f300bee0ddf7f93ef94046604b830333834607db567f2df19689dd8a2707a9cbbde1bfeb036273a5295650269c582bdccd48f2edd2dfba281ed8d391ace69f99825a3e7466aca3575283d6a1e08f534a0f18fec8aab21ec9abf6cfe2b43621991f8c3fd61a99dfb04f9c46c440be310b5f359d687c88b1bee628a1704b381d2f198599bd2cc30df714b7d7df66567077d8169187dbb1323d4c4a6ad3ee42852c06880fb7257375084060be01149f27810e3c9aa5dabdde8b8b3c7d88d2d05d54191a00158118f80eda94a19f00bbebbac5f228fb5d21afc86dddda12e52d8803dc2c5a13ad0b9065ddb1575489a6d4de7990db1465f8555ee38bed1512fc9c76380ca2d114c1c4c2b9acbfc725ada2098990fc0e699f7a82d926319c1b97820ea6db0728c16136e2b848c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码：test</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>HTML</tag>
      
      <tag>js</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS-M2 如何进入恢复模式管理SIP</title>
    <link href="/2025/02/17/3-macOS-M2%E5%A6%82%E4%BD%95%E5%BC%80%E5%85%B3SIP/"/>
    <url>/2025/02/17/3-macOS-M2%E5%A6%82%E4%BD%95%E5%BC%80%E5%85%B3SIP/</url>
    
    <content type="html"><![CDATA[<p>在 macOS M2 设备上，有时我们需要进入 <strong>恢复模式</strong>（Recovery Mode）来执行一些系统级的操作，比如关闭或开启 SIP（System Integrity Protection）。本文将详细介绍如何进入恢复模式，并管理 SIP 设置。</p><h2 id="进入恢复模式"><a href="#进入恢复模式" class="headerlink" title="进入恢复模式"></a>进入恢复模式</h2><ol><li><strong>关闭 Mac</strong>：如果 Mac 处于开机状态，先正常关机。</li><li><strong>进入恢复模式</strong>：按住 <strong>电源键</strong>，直到看到 Apple 标志和“启动选项”的窗口。</li><li><strong>选择恢复模式</strong>：在启动选项中，点击 <strong>选项（Options）</strong>，然后选择 <strong>继续（Continue）</strong>。</li><li><strong>打开终端</strong>：<ul><li>在恢复模式界面，点击 <strong>左上角菜单</strong>。</li><li>选择 <strong>Utilities（实用工具）</strong> &gt; <strong>Terminal（终端）</strong>。</li></ul></li></ol><h2 id="关闭-SIP"><a href="#关闭-SIP" class="headerlink" title="关闭 SIP"></a>关闭 SIP</h2><ol><li>在终端中输入以下命令：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">csrutil <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure></li><li>按下 <strong>回车（Enter）</strong>。</li><li>根据提示输入 <strong>管理员密码</strong>（不会显示输入内容，直接输入后按回车）。</li><li>关闭 <strong>终端</strong>。</li><li>点击 <strong>左上角苹果图标</strong>，选择 <strong>Restart（重启）</strong>，等待 Mac 重新启动。</li><li>现在，SIP 已被关闭，你可以运行需要操作的文件。</li></ol><h2 id="重新开启-SIP"><a href="#重新开启-SIP" class="headerlink" title="重新开启 SIP"></a>重新开启 SIP</h2><p>完成所需操作后，建议重新启用 SIP 以保护系统安全。步骤如下：</p><ol><li><strong>重复进入恢复模式</strong>（参考上方步骤）。</li><li><strong>打开终端</strong>，输入以下命令：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">csrutil <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure></li><li>按下 <strong>回车（Enter）</strong>。</li><li>关闭 <strong>终端</strong>。</li><li>点击 <strong>左上角苹果图标</strong>，选择 <strong>Restart（重启）</strong>，等待 Mac 重新启动。</li><li>现在，SIP 已成功启用，系统受保护状态恢复。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>SIP 是 macOS 的一项重要安全机制，通常情况下不建议关闭。只有在需要进行特定修改时才临时关闭，并在操作完成后立即重新启用，以确保系统安全稳定。</p>]]></content>
    
    
    <categories>
      
      <category>System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据科学 - 客户流失预测：基于随机森林的分析与优化</title>
    <link href="/2025/02/12/4-1-%E5%AE%A2%E6%88%B7%E6%B5%81%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/12/4-1-%E5%AE%A2%E6%88%B7%E6%B5%81%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a><strong>项目概述</strong></h2><p>本项目旨在帮助PowerCo（一个大型公用事业公司，提供电力和天然气服务）解决客户流失的问题。PowerCo面临的主要挑战是中小型企业（SME）客户的流失，尤其是在当前充满竞争的能源市场中。为了帮助PowerCo更好地理解客户流失的原因，我们的目标是识别导致客户流失的关键因素，并提出改进客户留存率的具体建议。</p><p>在这个项目中，我们将通过数据科学的方法，结合探索性数据分析（EDA）、特征工程和机器学习模型，帮助PowerCo识别流失的驱动因素。最终，我们将构建一个客户流失预测模型，并提出基于数据驱动的建议，帮助PowerCo提高客户留存率。</p><h2 id="Task-1：业务理解与假设框架"><a href="#Task-1：业务理解与假设框架" class="headerlink" title="Task 1：业务理解与假设框架"></a><strong>Task 1：业务理解与假设框架</strong></h2><p>在项目的初期阶段，我们的任务是将PowerCo面临的业务问题转化为数据科学问题，并为后续的分析设立清晰的假设框架。</p><h3 id="业务问题定义"><a href="#业务问题定义" class="headerlink" title="业务问题定义"></a><strong>业务问题定义</strong></h3><p>PowerCo正在面临越来越多的客户流失问题，尤其是在中小型企业（SME）领域。为了找出客户流失的根本原因，我们需要回答以下几个关键问题：</p><ul><li><strong>流失的原因是什么？</strong> 客户流失可能受到多个因素的影响，如产品定价、产品差异化、客户服务质量等。</li><li><strong>有哪些因素会导致客户选择更换能源供应商？</strong> 是否有某些特定因素（如价格敏感度）对客户流失有更大的影响？</li></ul><h3 id="假设框架"><a href="#假设框架" class="headerlink" title="假设框架"></a><strong>假设框架</strong></h3><p>在初步了解了业务问题后，我们根据行业知识和前期调研，提出了以下假设，作为后续分析的方向：</p><ol><li><strong>产品差异化不足</strong>：如果PowerCo的产品与其他供应商差异不大，客户可能会更容易转向价格更具竞争力的其他供应商。</li><li><strong>客户服务差</strong>：差的客户服务可能会导致客户的不满和流失。提高客户服务质量或许是减少流失的有效措施。</li><li><strong>定价问题</strong>：客户流失可能与价格敏感度相关，即如果客户觉得其他供应商提供更具吸引力的价格，他们可能会选择换供应商。</li></ol><p>基于这些假设，我们将通过数据分析来验证这些因素是否确实是流失的关键驱动因素。</p><h3 id="数据科学任务"><a href="#数据科学任务" class="headerlink" title="数据科学任务"></a><strong>数据科学任务</strong></h3><p>将业务问题转化为数据科学问题，我们的主要任务包括：</p><ul><li><strong>收集和分析数据</strong>：我们将需要从PowerCo收集历史客户数据、定价数据和客户流失数据。</li><li><strong>建立假设并进行验证</strong>：通过数据分析验证上述假设，评估哪些因素对客户流失的影响最大。</li><li><strong>模型设计</strong>：基于数据分析结果，我们将构建预测模型，用于预测哪些客户更可能流失。</li></ul><h2 id="Task-2：探索性数据分析（EDA）"><a href="#Task-2：探索性数据分析（EDA）" class="headerlink" title="Task 2：探索性数据分析（EDA）"></a><strong>Task 2：探索性数据分析（EDA）</strong></h2><h3 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a><strong>任务目标</strong></h3><p>我们的目标是通过探索性数据分析（EDA）深入了解PowerCo的客户数据和定价数据，并识别可能影响客户流失的关键因素。通过对数据的初步分析，我们将能够发现潜在的趋势、模式以及异常值，为后续的建模和特征工程工作打下基础。</p><h3 id="数据集概述"><a href="#数据集概述" class="headerlink" title="数据集概述"></a><strong>数据集概述</strong></h3><p>我们使用了两个主要的数据集：<strong>client_data.csv</strong> 和 <strong>price_data.csv</strong>。这些数据集包含了PowerCo的客户信息、消费行为以及电力和功率价格等信息。</p><h4 id="client-data-csv"><a href="#client-data-csv" class="headerlink" title="client_data.csv"></a><strong>client_data.csv</strong></h4><p>这个数据集包含了PowerCo的客户信息，主要字段如下：</p><ul><li><strong>id</strong>: 客户公司唯一标识符</li><li><strong>activity_new</strong>: 客户公司活动类别</li><li><strong>channel_sales</strong>: 销售渠道的代码</li><li><strong>cons_12m</strong>: 过去12个月的电力消费量</li><li><strong>cons_gas_12m</strong>: 过去12个月的天然气消费量</li><li><strong>cons_last_month</strong>: 上个月的电力消费量</li><li><strong>date_activ</strong>: 合同激活日期</li><li><strong>date_end</strong>: 合同结束日期</li><li><strong>date_modif_prod</strong>: 上次产品修改日期</li><li><strong>date_renewal</strong>: 下一次合同续约日期</li><li><strong>forecast_cons_12m</strong>: 预测的未来12个月电力消费量</li><li><strong>forecast_cons_year</strong>: 预测的未来1年电力消费量</li><li><strong>forecast_discount_energy</strong>: 当前电力折扣的预测值</li><li><strong>forecast_meter_rent_12m</strong>: 未来12个月的电表租赁费用预测</li><li><strong>forecast_price_energy_off_peak</strong>: 预测的1号时段（非高峰时段）电价</li><li><strong>forecast_price_energy_peak</strong>: 预测的2号时段（高峰时段）电价</li><li><strong>forecast_price_pow_off_peak</strong>: 预测的1号时段（非高峰时段）功率价格</li><li><strong>has_gas</strong>: 是否为天然气用户</li><li><strong>imp_cons</strong>: 当前已支付的电力消费量</li><li><strong>margin_gross_pow_ele</strong>: 电力订阅的毛利</li><li><strong>margin_net_pow_ele</strong>: 电力订阅的净利</li><li><strong>nb_prod_act</strong>: 活跃产品和服务的数量</li><li><strong>net_margin</strong>: 总净利润</li><li><strong>num_years_antig</strong>: 客户的历史年数（即客户的老化度）</li><li><strong>origin_up</strong>: 客户首次订阅的电力营销活动的代码</li><li><strong>pow_max</strong>: 订阅的最大功率</li><li><strong>churn</strong>: 客户是否在未来3个月内流失（流失标识）</li></ul><h4 id="price-data-csv"><a href="#price-data-csv" class="headerlink" title="price_data.csv"></a><strong>price_data.csv</strong></h4><p>这个数据集包含了每个客户的电力和功率价格数据，涵盖了不同时间段的电价情况。主要字段如下：</p><ul><li><strong>id</strong>: 客户公司唯一标识符</li><li><strong>price_date</strong>: 参考日期</li><li><strong>price_off_peak_var</strong>: 1号时段（非高峰时段）的变动电价</li><li><strong>price_peak_var</strong>: 2号时段（高峰时段）的变动电价</li><li><strong>price_mid_peak_var</strong>: 3号时段（中峰时段）的变动电价</li><li><strong>price_off_peak_fix</strong>: 1号时段（非高峰时段）的固定电价</li><li><strong>price_peak_fix</strong>: 2号时段（高峰时段）的固定电价</li><li><strong>price_mid_peak_fix</strong>: 3号时段（中峰时段）的固定电价</li></ul><p><strong>注意：</strong> 部分字段为哈希处理的文本字符串，这些字段保持了原始数据的隐私性，但它们仍然保留了商业含义，可能具有预测能力。</p><hr><h3 id="数据用途与分析"><a href="#数据用途与分析" class="headerlink" title="数据用途与分析"></a><strong>数据用途与分析</strong></h3><p>在探索性数据分析（EDA）阶段，我们将重点分析以下几个方面：</p><ol><li><p><strong>客户消费行为：</strong><br>通过分析过去12个月的电力和天然气消费量、预测消费量等数据，我们希望识别哪些消费模式可能与客户流失相关。例如，客户是否有突出的消费模式（如在某些月份消费激增），这些模式可能会影响他们是否选择续约或切换到其他供应商。</p></li><li><p><strong>定价因素：</strong><br>价格是流失的一个潜在驱动因素。我们将分析不同时间段（如高峰时段和非高峰时段）的电力价格如何影响客户流失。特别是，对于价格敏感的客户，价格的波动可能会直接影响他们的流失决定。</p></li><li><p><strong>客户服务与合约信息：</strong><br>客户的合约信息（如合同开始和结束日期、产品修改日期、续约日期等）可能揭示出客户是否有重新评估服务的趋势。如果客户接近合同结束日期或者没有及时续约，他们可能更容易流失。因此，我们将分析这些时间相关特征对客户流失的影响。</p></li><li><p><strong>流失率分析：</strong><br>我们将计算流失率，并检查不同特征（如消费水平、价格敏感度、合同类型等）与流失率之间的关系。这将帮助我们识别出哪些特征在预测客户流失方面更为重要。</p></li><li><p><strong>异常值与数据清洗：</strong><br>在EDA过程中，可能会遇到数据中的异常值或缺失值。我们将通过描述性统计分析（如均值、中位数、标准差）和可视化手段（如箱型图）来识别这些问题，并采取相应的措施进行处理。</p></li></ol><hr><h3 id="探索性数据分析（EDA）"><a href="#探索性数据分析（EDA）" class="headerlink" title="探索性数据分析（EDA）"></a><strong>探索性数据分析（EDA）</strong></h3><p>在任务2中，我们使用了探索性数据分析（EDA）来对PowerCo的客户数据和定价数据进行深入分析。以下是我们分析的关键内容和得出的结论。</p><h4 id="1-数据加载和描述性统计"><a href="#1-数据加载和描述性统计" class="headerlink" title="1. 数据加载和描述性统计"></a><strong>1. 数据加载和描述性统计</strong></h4><p>首先，我们加载了<code>client_data.csv</code>和<code>price_data.csv</code>数据，并进行了基本的描述性统计分析。通过查看数据的结构和每个字段的类型，我们可以了解数据的基本情况。</p><ul><li><strong>客户数据</strong>（<code>client_data.csv</code>）包含26列，其中包括客户的消费数据、合同信息和是否流失的标识。</li><li><strong>价格数据</strong>（<code>price_data.csv</code>）包含7列，主要是关于不同时间段电价的数据。</li></ul><p>我们注意到，日期相关的字段目前并非日期格式，这意味着我们在后续处理中需要将这些字段转换为适当的日期格式。</p><h4 id="2-主要分析内容"><a href="#2-主要分析内容" class="headerlink" title="2. 主要分析内容"></a><strong>2. 主要分析内容</strong></h4><p>在EDA中，我们分析了以下几个关键领域：</p><h5 id="客户流失分析"><a href="#客户流失分析" class="headerlink" title="客户流失分析"></a><strong>客户流失分析</strong></h5><p>我们计算并可视化了客户流失的比例。结果显示，大约<strong>10%的客户</strong>发生了流失，这为我们后续的分析提供了一个基准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">churn_percentage = churn_total / churn_total.<span class="hljs-built_in">sum</span>() * <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h5 id="销售渠道的流失分布"><a href="#销售渠道的流失分布" class="headerlink" title="销售渠道的流失分布"></a><strong>销售渠道的流失分布</strong></h5><p>我们分析了不同销售渠道的客户流失情况，结果显示，流失客户分布在多个销售渠道中，尤其是<code>MISSING</code>值对应的渠道流失率为7.6%。这表明，数据清洗过程中<code>MISSING</code>值可能隐含了某些有用的信息，值得在建模时进一步关注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">channel_churn = (channel.div(channel.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>) * <span class="hljs-number">100</span>).sort_values(by=[<span class="hljs-number">1</span>], ascending=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h5 id="客户消费分析"><a href="#客户消费分析" class="headerlink" title="客户消费分析"></a><strong>客户消费分析</strong></h5><p>我们检查了客户过去12个月的电力和天然气消费数据，并通过直方图展示了它们的分布。消费数据呈<strong>高度正偏态</strong>，显示出在高消费值附近有较长的右尾，这表明存在大量极值或异常值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_distribution(consumption, <span class="hljs-string">&#x27;cons_12m&#x27;</span>, axs[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h5 id="价格敏感度分析"><a href="#价格敏感度分析" class="headerlink" title="价格敏感度分析"></a><strong>价格敏感度分析</strong></h5><p>我们分析了电力的预测价格（高峰和非高峰时段），并观察价格波动对客户流失的潜在影响。该分析有助于确定价格是否为客户流失的主要驱动因素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_distribution(client_df, <span class="hljs-string">&quot;forecast_price_energy_off_peak&quot;</span>, axs[<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><h5 id="合同类型和客户流失"><a href="#合同类型和客户流失" class="headerlink" title="合同类型和客户流失"></a><strong>合同类型和客户流失</strong></h5><p>我们进一步分析了客户是否使用天然气服务对流失的影响。结果表明，天然气客户的流失率较低，这表明多产品套餐可能有助于提高客户的留存率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">contract_percentage = (contract.div(contract.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>) * <span class="hljs-number">100</span>).sort_values(by=[<span class="hljs-number">1</span>], ascending=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h5 id="毛利和净利分析"><a href="#毛利和净利分析" class="headerlink" title="毛利和净利分析"></a><strong>毛利和净利分析</strong></h5><p>通过分析电力订阅的毛利和净利，我们发现有部分客户的毛利和净利值非常高，这可能表示他们是高价值客户。我们将在特征工程阶段进一步分析这些客户的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sns.boxplot(margin[<span class="hljs-string">&quot;margin_gross_pow_ele&quot;</span>], ax=axs[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><p>从EDA中，我们得出了以下结论：</p><ol><li><strong>流失率</strong>：大约10%的客户流失，这为后续的模型提供了基准。</li><li><strong>消费行为</strong>：消费数据偏斜，需要在特征工程中进行调整。</li><li><strong>销售渠道</strong>：不同的销售渠道具有不同的流失率，其中<code>MISSING</code>销售渠道的流失率特别高。</li><li><strong>价格敏感度</strong>：虽然电力价格波动对流失有一定影响，但价格并非最主要的流失因素。</li><li><strong>多产品套餐</strong>：使用天然气的客户流失率较低，表明跨产品套餐可能有助于减少流失。</li></ol><h2 id="Task-3：特征工程"><a href="#Task-3：特征工程" class="headerlink" title="Task 3：特征工程"></a>Task 3：特征工程</h2><p>我们进行了特征工程，以增强预测模型的表现，并为后续建模提供了更有用的数据特征。特征工程包括创建新的特征、处理缺失值、数据转换以及特征的编码。以下是详细的过程和结论。</p><h3 id="1-创建价格差异特征"><a href="#1-创建价格差异特征" class="headerlink" title="1. 创建价格差异特征"></a><strong>1. 创建价格差异特征</strong></h3><p>我们首先关注了电价的变化，尤其是12月与前1月之间的电价波动。电价波动可能是客户流失的重要原因。我们通过以下步骤创建了新的特征：</p><ul><li><strong>步骤1</strong>：将电价数据按公司和日期进行分组，计算每个月的平均电价。</li><li><strong>步骤2</strong>：提取1月和12月的数据，并计算这两个月之间的电价差异。<ul><li>计算了<code>offpeak_diff_dec_january_energy</code>（电力价格的电能差异）和<code>offpeak_diff_dec_january_power</code>（电力价格的功率差异）这两个新特征。</li></ul></li></ul><h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>通过分析这些价格差异特征，我们发现价格波动对客户流失可能具有显著影响。客户可能因价格大幅波动而选择离开，因此这些特征为流失预测提供了有价值的信息。</p><h3 id="2-计算时间段内的平均价格变化"><a href="#2-计算时间段内的平均价格变化" class="headerlink" title="2. 计算时间段内的平均价格变化"></a><strong>2. 计算时间段内的平均价格变化</strong></h3><p>除了价格差异，我们还计算了不同时段之间的平均价格差异。这些时段包括<code>off_peak</code>、<code>peak</code>和<code>mid_peak</code>，每个时段的价格变化对客户的影响不同。我们计算了以下特征：</p><ul><li><code>off_peak_peak_var_mean_diff</code>：计算<code>off_peak</code>和<code>peak</code>时段的平均电价差异。</li><li><code>peak_mid_peak_var_mean_diff</code>：计算<code>peak</code>和<code>mid_peak</code>时段的平均电价差异。</li><li><code>off_peak_mid_peak_var_mean_diff</code>：计算<code>off_peak</code>和<code>mid_peak</code>时段的平均电价差异。</li><li>同样地，对于固定价格时段，我们也计算了类似的特征。</li></ul><h4 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>通过这些细化的价格变化特征，我们能够捕捉到每个时间段的电价波动，这些波动可能会影响客户的行为。例如，若某一时段的电价上涨较多，客户可能会更倾向于寻找其他电力供应商，因此这些特征可能有助于预测客户流失。</p><h3 id="3-计算最大价格变化"><a href="#3-计算最大价格变化" class="headerlink" title="3. 计算最大价格变化"></a><strong>3. 计算最大价格变化</strong></h3><p>在此基础上，我们还计算了每个月电价的最大变化，进一步捕捉那些可能导致客户流失的异常波动。例如，若某个月的价格突然大幅上涨，客户可能会选择离开。以下是创建的特征：</p><ul><li><code>off_peak_peak_var_max_monthly_diff</code>：计算每个月在<code>off_peak</code>和<code>peak</code>时段的最大价格差异。</li><li><code>peak_mid_peak_var_max_monthly_diff</code>：计算每个月在<code>peak</code>和<code>mid_peak</code>时段的最大价格差异。</li><li><code>off_peak_mid_peak_var_max_monthly_diff</code>：计算每个月在<code>off_peak</code>和<code>mid_peak</code>时段的最大价格差异。</li></ul><h4 id="结论-3"><a href="#结论-3" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>这些最大价格变化特征帮助我们捕捉到价格波动的极端情况，这对客户的流失决策有着重要的影响。例如，突然的价格大幅上升可能会让客户更加倾向于跳槽到其他供应商，因此这些特征可能对流失预测有着重要的作用。</p><h3 id="4-创建客户任期特征"><a href="#4-创建客户任期特征" class="headerlink" title="4. 创建客户任期特征"></a><strong>4. 创建客户任期特征</strong></h3><p>客户的任期（即客户与公司建立关系的时间）是另一个重要的特征。我们通过计算客户的任期（以年为单位）来创建了<code>tenure</code>特征。我们发现，客户的任期与流失率之间存在一定的关系：</p><ul><li>客户的任期越短，其流失的可能性越大，尤其是在客户刚开始使用服务时。</li><li>对于任期较长的客户，流失的可能性相对较小。</li></ul><h4 id="结论-4"><a href="#结论-4" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>较短的客户任期与较高的流失率相关，因此，<code>tenure</code>特征对于预测流失具有重要价值。</p><h3 id="5-处理日期特征"><a href="#5-处理日期特征" class="headerlink" title="5. 处理日期特征"></a><strong>5. 处理日期特征</strong></h3><p>我们对日期特征进行了处理，转换为与特定参考日期的差异（以月为单位）。具体来说，我们创建了以下特征：</p><ul><li><code>months_activ</code>：客户自激活日期以来的月数。</li><li><code>months_to_end</code>：客户合同剩余的月数。</li><li><code>months_modif_prod</code>：自上次产品修改以来的月数。</li><li><code>months_renewal</code>：自上次合同续签以来的月数。</li></ul><p>这些特征有助于捕捉客户与公司之间的关系以及他们对合同变化的反应。</p><h4 id="结论-5"><a href="#结论-5" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>这些日期特征可以帮助我们了解客户的生命周期和与公司的关系。例如，接近合同到期的客户可能会开始寻找更优惠的供应商，因此这些特征有助于流失预测。</p><h3 id="6-转换布尔数据"><a href="#6-转换布尔数据" class="headerlink" title="6. 转换布尔数据"></a><strong>6. 转换布尔数据</strong></h3><p>我们将“has_gas”字段（表示客户是否同时使用电力和天然气服务）从布尔值转换为二元特征。结果显示，使用天然气的客户流失率较低，因此<code>has_gas</code>成为了一个重要的特征。</p><h4 id="结论-6"><a href="#结论-6" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>“has_gas”特征揭示了客户是否拥有多个服务，而多服务客户的流失率相对较低，这为流失预测提供了有价值的信息。</p><h3 id="7-类别数据编码（Categorical-Data-Encoding）"><a href="#7-类别数据编码（Categorical-Data-Encoding）" class="headerlink" title="7. 类别数据编码（Categorical Data Encoding）"></a><strong>7. 类别数据编码（Categorical Data Encoding）</strong></h3><p>在特征工程中，大多数机器学习算法不能直接处理字符串类型的数据。因此，我们需要将类别数据转换为模型能够理解的数值类型。常见的做法有两种：<strong>标签编码（Label Encoding）</strong> 和 <strong>独热编码（One-Hot Encoding）</strong>。</p><p>在这个任务中，我们主要使用了<strong>独热编码（One-Hot Encoding）</strong>，以下是针对两个重要类别数据的处理：</p><h4 id="7-1-channel-sales（销售渠道）"><a href="#7-1-channel-sales（销售渠道）" class="headerlink" title="7.1. channel_sales（销售渠道）"></a><strong>7.1. <code>channel_sales</code>（销售渠道）</strong></h4><p>这个特征是一个字符串类型的变量，它表示客户的销售渠道。为了让模型能够处理这个变量，我们将其转换为多个二元（0或1）特征，这样每个独特的销售渠道都对应一个新特征。使用<code>pandas</code>的<code>get_dummies</code>方法进行独热编码后，每个唯一的<code>channel_sales</code>值都会变成一个新的二元特征。如果客户来自某个销售渠道，则为1，否则为0。</p><h4 id="7-2-origin-up（原始营销活动）"><a href="#7-2-origin-up（原始营销活动）" class="headerlink" title="7.2. origin_up（原始营销活动）"></a><strong>7.2. <code>origin_up</code>（原始营销活动）</strong></h4><p>类似于<code>channel_sales</code>，<code>origin_up</code>也是一个类别变量，表示客户最初参与的营销活动。为了将它转化为数值特征，我们同样使用了<strong>独热编码</strong>。每个唯一的营销活动值将成为一个新的二元特征，标示出该客户是否参与了特定的营销活动。</p><h4 id="结论-7"><a href="#结论-7" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>通过 <code>One-Hot Encoding</code>，我们成功地将类别数据转换为数值数据，并避免了由于类别间不合适的顺序关系而可能引入的问题（比如将类别映射为数字时赋予了错误的顺序）。同时，删除频次过低的类别特征，也提高了模型的计算效率。</p><h3 id="8-数值数据的转换（处理偏态分布）（Handling-Skewness-in-Numerical-Data）"><a href="#8-数值数据的转换（处理偏态分布）（Handling-Skewness-in-Numerical-Data）" class="headerlink" title="8. 数值数据的转换（处理偏态分布）（Handling Skewness in Numerical Data）"></a><strong>8. 数值数据的转换（处理偏态分布）（Handling Skewness in Numerical Data）</strong></h3><p>在分析数据时，我们发现一些特征的呈<strong>偏态分布</strong>（Skewed Distribution），尤其是消费类特征，如<code>cons_12m</code>、<code>cons_gas_12m</code>、<code>forecast_cons_12m</code>等。对于偏态分布的特征，很多机器学习模型（特别是线性模型）可能会受到影响，因为它们通常假设数据接近正态分布。为了解决这一问题，常见的处理方法是对这些数据进行<strong>对数转换</strong>（Log Transformation）。</p><h4 id="对数转换的实现"><a href="#对数转换的实现" class="headerlink" title="对数转换的实现"></a><strong>对数转换的实现</strong></h4><p>我们对以下特征进行了对数转换：</p><ul><li><code>cons_12m</code>（过去12个月的电力消费量）</li><li><code>cons_gas_12m</code>（过去12个月的天然气消费量）</li><li><code>cons_last_month</code>（上个月的电力消费量）</li><li><code>forecast_cons_12m</code>（未来12个月的电力消费预测）</li><li><code>forecast_cons_year</code>（未来一年的电力消费预测）</li><li><code>forecast_meter_rent_12m</code>（未来12个月的计量仪器租赁费）</li></ul><p>对数转换时，我们添加了常数<strong>1</strong>（<code>np.log10(df[&quot;cons_12m&quot;] + 1)</code>），这样做是为了避免对数零值的出现（因为对数0是无定义的）。</p><h4 id="结论-8"><a href="#结论-8" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>转换后的数据分布更加均匀，且标准差减小，说明数据变得更加稳定，适合用于机器学习模型。</p><h3 id="9-相关性分析（Correlation-Analysis）"><a href="#9-相关性分析（Correlation-Analysis）" class="headerlink" title="9. 相关性分析（Correlation Analysis）"></a><strong>9. 相关性分析（Correlation Analysis）</strong></h3><p>相关性分析的目的是找出特征之间的关系，以避免模型中出现高度相关的特征（即多重共线性）。如果特征之间的相关性过高，可能会导致模型的误差增大，甚至使得模型变得不稳定。因此，在建模之前，我们通常会对数据进行相关性分析，找出和目标变量（在这个项目中为<code>churn</code>）相关的特征，并剔除那些高度相关的特征。</p><h4 id="9-1-如何进行相关性分析？"><a href="#9-1-如何进行相关性分析？" class="headerlink" title="9.1. 如何进行相关性分析？"></a><strong>9.1. 如何进行相关性分析？</strong></h4><p>我们通过计算所有特征之间的<strong>皮尔逊相关系数</strong>（Pearson Correlation Coefficient），并绘制相关性热图。相关系数值的范围为[-1, 1]，其中：</p><ul><li><code>1</code> 表示完全正相关，</li><li><code>-1</code> 表示完全负相关，</li><li><code>0</code> 表示没有相关性。</li></ul><h4 id="9-2-特征选择"><a href="#9-2-特征选择" class="headerlink" title="9.2. 特征选择"></a><strong>9.2. 特征选择</strong></h4><p>我们通过热图观察了所有特征之间的相关性。热图显示了以下几种情况：</p><ul><li><code>cons_12m</code>（过去12个月的电力消费量）与其他消费相关的特征（如<code>cons_last_month</code>、<code>forecast_cons_12m</code>）之间有很强的相关性，这表明这些特征在反映客户消费行为时有重复的信息。</li><li>一些特征（如<code>num_years_antig</code>和<code>forecast_cons_year</code>）与其他特征之间有较强的相关性，这可能会导致模型的多重共线性问题。</li></ul><p>基于相关性分析，我们删除了两个冗余特征：</p><ul><li><code>num_years_antig</code>：与其他特征（如<code>tenure</code>）高度相关。</li><li><code>forecast_cons_year</code>：与<code>forecast_cons_12m</code>高度相关。</li></ul><h2 id="Task-4：建模"><a href="#Task-4：建模" class="headerlink" title="Task 4：建模"></a>Task 4：建模</h2><p>在完成了数据预处理和特征工程之后，我们可以开始构建预测模型。根据任务要求，我们将使用 <strong>随机森林分类器</strong> 来预测客户是否会流失。</p><h3 id="数据采样"><a href="#数据采样" class="headerlink" title="数据采样"></a><strong>数据采样</strong></h3><p>将数据集分成训练集和测试集的目的是模拟现实场景，通过使用测试集进行预测来评估模型的泛化能力。我们通过将数据集分为 75% 的训练数据和 25%。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">train_df = df.copy()<br><br><span class="hljs-comment"># 分离目标变量与特征变量</span><br>y = df[<span class="hljs-string">&#x27;churn&#x27;</span>]<br>X = df.drop(columns=[<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;churn&#x27;</span>])<br><br><span class="hljs-comment"># 拆分数据集</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a><strong>模型训练</strong></h3><p>在本任务中，我们使用了 <strong>随机森林分类器</strong>（Random Forest Classifier）。随机森林属于“集成算法”类别，通过多个决策树组合成一个“森林”。通过训练多个决策树，我们能够提高模型的准确性和鲁棒性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">model = RandomForestClassifier(n_estimators=<span class="hljs-number">1000</span>)<br>model.fit(X_train, y_train)<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li>随机森林模型通过构建 1000 个决策树来进行训练。每棵决策树独立训练，且每棵树都会学习到数据的不同部分和不同的模式。通过这种方式，我们能提高模型的泛化能力，并减少过拟合的风险。</li></ul><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a><strong>模型评估</strong></h3><p>在训练完模型后，为了评估模型的效果，我们使用了三个常见的评估指标：</p><ul><li><strong>准确率（Accuracy）</strong>：正确预测的观察值占总观察值的比例。</li><li><strong>精确率（Precision）</strong>：模型将负类错误预测为正类的能力（即避免假阳性）。</li><li><strong>召回率（Recall）</strong>：模型识别所有正类的能力。</li></ul><p>这三个指标非常重要，因为如果我们只依赖准确率，可能会错过一些潜在的重要信息，尤其是当数据不平衡时。例如，在预测心脏病患者时，假阳性和假阴性都会带来不同的影响，因此精确率和召回率的评估比准确率更为重要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions = model.predict(X_test)<br>tn, fp, fn, tp = metrics.confusion_matrix(y_test, predictions).ravel()<br><br><span class="hljs-comment"># 打印评估指标</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Accuracy: <span class="hljs-subst">&#123;metrics.accuracy_score(y_test, predictions)&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Precision: <span class="hljs-subst">&#123;metrics.precision_score(y_test, predictions)&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recall: <span class="hljs-subst">&#123;metrics.recall_score(y_test, predictions)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li><strong>准确率</strong>：0.90，模型能够准确预测大部分客户的流失情况。</li><li><strong>精确率</strong>：0.82，模型的精确率较高，意味着在预测流失客户时误判的比例较低。</li><li><strong>召回率</strong>：0.05，召回率非常低，表明模型未能有效地识别出所有的流失客户。尽管精确率较高，但召回率低的原因是模型倾向于预测客户不流失。</li></ul><p>这表明模型更擅长识别“非流失”客户，但在流失客户的预测上存在较大改进空间。</p><h3 id="模型理解"><a href="#模型理解" class="headerlink" title="模型理解"></a><strong>模型理解</strong></h3><p>为了进一步理解模型，我们可以查看每个特征的重要性。特征重要性反映了每个特征在预测中的作用，可以帮助我们理解哪些特征对模型的预测贡献最大。通过<code>RandomForestClassifier</code>提供的<code>feature_importances_</code>方法，我们可以提取每个特征的重要性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">feature_importances = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;features&#x27;</span>: X_train.columns,<br>    <span class="hljs-string">&#x27;importance&#x27;</span>: model.feature_importances_<br>&#125;).sort_values(by=<span class="hljs-string">&#x27;importance&#x27;</span>, ascending=<span class="hljs-literal">True</span>).reset_index()<br><br><span class="hljs-comment"># 绘制特征重要性图</span><br>plt.figure(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">25</span>))<br>plt.title(<span class="hljs-string">&#x27;Feature Importances&#x27;</span>)<br>plt.barh(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(feature_importances)), feature_importances[<span class="hljs-string">&#x27;importance&#x27;</span>], color=<span class="hljs-string">&#x27;b&#x27;</span>, align=<span class="hljs-string">&#x27;center&#x27;</span>)<br>plt.yticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(feature_importances)), feature_importances[<span class="hljs-string">&#x27;features&#x27;</span>])<br>plt.xlabel(<span class="hljs-string">&#x27;Importance&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/./images/1-%E5%AE%A2%E6%88%B7%E6%B5%81%E5%A4%B1%E9%97%AE%E9%A2%98/feature_importance.webp" alt="Importance v.s. Features"></p><p><strong>结论</strong>：</p><ul><li><strong>最重要的特征</strong>：模型最重要的特征包括净利润、过去 12 个月的消费以及电力订阅的毛利。</li><li><strong>时间因素</strong>：客户的活跃时间（月数）、客户的服务年限以及合同更新的时间也对流失预测有很大影响。</li><li><strong>价格敏感性</strong>：虽然价格敏感性特征（如电力价格）在特征重要性中分布较广，但并不是流失预测的主要驱动因素。</li></ul><h3 id="预测概率与结果保存"><a href="#预测概率与结果保存" class="headerlink" title="预测概率与结果保存"></a><strong>预测概率与结果保存</strong></h3><p>最后，我们还可以获得每个客户流失的概率，并将其与实际流失结果一起保存，以便后续分析或验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">proba_predictions = model.predict_proba(X_test)<br>probabilities = proba_predictions[:, <span class="hljs-number">1</span>]<br><br>X_test = X_test.reset_index()<br>X_test.drop(columns=<span class="hljs-string">&#x27;index&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br><br>X_test[<span class="hljs-string">&#x27;churn&#x27;</span>] = predictions.tolist()<br>X_test[<span class="hljs-string">&#x27;churn_probability&#x27;</span>] = probabilities.tolist()<br>X_test.to_csv(<span class="hljs-string">&#x27;out_of_sample_data_with_predictions.csv&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li>我们成功地将每个客户的流失概率和实际流失标签保存到<code>X_test</code>数据集中，生成了最终的预测结果。这些数据可以用于后续分析和决策支持。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>通过使用随机森林分类器，我们构建了一个预测客户流失的模型。虽然模型在识别非流失客户方面表现优秀，但在流失客户的预测上还有改进空间。召回率较低提示我们需要进一步优化模型，可能包括重新审视特征工程和模型参数调优。</p><p>此外，特征重要性分析帮助我们理解哪些因素对客户流失的预测最为关键，例如净利润、客户活跃时间和电力消费等。</p>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>ML</tag>
      
      <tag>Data_Science</tag>
      
      <tag>Projects</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置自定义域名</title>
    <link href="/2025/02/06/1-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/2025/02/06/1-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>在本篇博客中，我们将介绍如何使用 <strong>GitHub Actions</strong> 来实现 <strong>Hexo 博客的自动化部署</strong>，并且配置 <strong>自定义域名</strong>，确保 GitHub Pages 部署后不会丢失域名设置。</p><hr><h2 id="1-配置-GitHub-Actions"><a href="#1-配置-GitHub-Actions" class="headerlink" title="1. 配置 GitHub Actions"></a><strong>1. 配置 GitHub Actions</strong></h2><h3 id="1-1-修改-github-workflows-deploy-yml-文件"><a href="#1-1-修改-github-workflows-deploy-yml-文件" class="headerlink" title="1.1 修改 .github/workflows/deploy.yml 文件"></a><strong>1.1 修改 <code>.github/workflows/deploy.yml</code> 文件</strong></h3><p>在 <code>deploy.yml</code> 文件中添加<code>hexo deploy --cname &lt;name&gt;</code>到下面位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span>  <span class="hljs-comment"># 部署到 GitHub Pages</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$SSH_PRIVATE_KEY&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name &quot;$GIT_NAME&quot;</span><br><span class="hljs-string">          git config --global user.email &quot;$GIT_EMAIL&quot;</span><br><span class="hljs-string">          hexo deploy --cname neurowave.tech  # 在这里指定域名</span><br></code></pre></td></tr></table></figure><h2 id="2-配置自定义域名"><a href="#2-配置自定义域名" class="headerlink" title="2. 配置自定义域名"></a><strong>2. 配置自定义域名</strong></h2><h3 id="2-1-在阿里云配置域名解析"><a href="#2-1-在阿里云配置域名解析" class="headerlink" title="2.1 在阿里云配置域名解析"></a><strong>2.1 在阿里云配置域名解析</strong></h3><p>如果你使用的是 <strong>阿里云</strong> 购买的域名，需要在 <strong>阿里云 DNS 控制台</strong> 添加解析记录。</p><ol><li>进入 <strong>阿里云控制台</strong> → <strong>公网 DNS 解析</strong> → <strong>权威域名解析</strong>。</li><li>选择你的域名，点击 <strong>添加记录</strong> 或 <strong>新手引导</strong>。</li><li>选择 <strong>记录类型</strong> 为 <code>CNAME</code>。</li><li>在 <strong>主机记录</strong> 选择：<ul><li><code>www</code>（用于 <code>www.yourdomain.com</code>）</li><li><code>@</code>（用于 <code>yourdomain.com</code>）。</li></ul></li><li>在 <strong>记录值</strong> 中填写你的 GitHub Pages 地址，例如：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">artintyt.github.<span class="hljs-built_in">io</span><br></code></pre></td></tr></table></figure></li><li>点击 <strong>保存</strong>。</li></ol><h3 id="2-2-生成-CNAME-文件"><a href="#2-2-生成-CNAME-文件" class="headerlink" title="2.2 生成 CNAME 文件"></a><strong>2.2 生成 <code>CNAME</code> 文件</strong></h3><p>如果你的博客使用自定义域名（如 <code>neurowave.tech</code>），你需要在 <code>source/</code> 目录下创建 <code>CNAME</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;neurowave.tech&quot;</span> &gt; <span class="hljs-built_in">source</span>/CNAME<br></code></pre></td></tr></table></figure><p>然后提交到 <code>master</code> branch：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add <span class="hljs-built_in">source</span>/CNAME<br>git commit -m <span class="hljs-string">&quot;Add CNAME file&quot;</span><br>git push origin master<br></code></pre></td></tr></table></figure><p>你也可以手动创建一个叫 <code>CNAME</code> 文件到 <code>source/</code>。</p><h3 id="2-3-确保-CNAME-在-Hexo-部署时不会丢失"><a href="#2-3-确保-CNAME-在-Hexo-部署时不会丢失" class="headerlink" title="2.3 确保 CNAME 在 Hexo 部署时不会丢失"></a><strong>2.3 确保 <code>CNAME</code> 在 Hexo 部署时不会丢失</strong></h3><p>在 Hexo 的 <code>_config.yml</code> 文件中，确保 <code>deploy</code> 部分包含 <code>cname</code> 和你的自定义域名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span>  <span class="hljs-comment"># 你的 GitHub Pages 分支</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;Deploy blog updates&quot;</span><br>  <span class="hljs-attr">cname:</span> <span class="hljs-string">neurowave.tech</span>  <span class="hljs-comment"># 自定义域名</span><br></code></pre></td></tr></table></figure><h3 id="2-4-在-GitHub-Pages-启用自定义域名"><a href="#2-4-在-GitHub-Pages-启用自定义域名" class="headerlink" title="2.4 在 GitHub Pages 启用自定义域名"></a><strong>2.4 在 GitHub Pages 启用自定义域名</strong></h3><ol><li><strong>进入 GitHub 仓库</strong> → <strong>Settings</strong> → <strong>Pages</strong>。</li><li>在 <strong>Custom domain</strong> 输入 <code>neurowave.tech</code>。</li><li><strong>勾选 “Enforce HTTPS”</strong>，确保 HTTPS 正常工作。</li><li>等待 GitHub 解析你的域名，通常需要几分钟。</li></ol><h2 id="3-提交并触发-GitHub-Actions"><a href="#3-提交并触发-GitHub-Actions" class="headerlink" title="3. 提交并触发 GitHub Actions"></a><strong>3. 提交并触发 GitHub Actions</strong></h2><p>执行以下命令，将 <code>deploy.yml</code> 配置文件提交到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .github/workflows/deploy.yml<br>git commit -m <span class="hljs-string">&quot;Add GitHub Actions for Hexo deployment&quot;</span><br>git push origin master  <span class="hljs-comment"># 如果你的远程分支是 master</span><br></code></pre></td></tr></table></figure><p>推送代码后，GitHub Actions 会自动执行部署。</p><h2 id="4-检查-GitHub-Actions-是否成功"><a href="#4-检查-GitHub-Actions-是否成功" class="headerlink" title="4. 检查 GitHub Actions 是否成功"></a><strong>4. 检查 GitHub Actions 是否成功</strong></h2><h3 id="4-1-查看-Actions-运行状态"><a href="#4-1-查看-Actions-运行状态" class="headerlink" title="4.1 查看 Actions 运行状态"></a><strong>4.1 查看 Actions 运行状态</strong></h3><ol><li>打开 GitHub 仓库。</li><li>点击 <strong>Actions</strong> 选项卡。</li><li>查看最新的 Workflow 运行记录。</li><li>如果显示绿色 ✅，说明部署成功；如果失败，则查看日志分析问题。</li></ol><h3 id="4-2-访问你的博客"><a href="#4-2-访问你的博客" class="headerlink" title="4.2 访问你的博客"></a><strong>4.2 访问你的博客</strong></h3><p>GitHub Pages 更新可能需要几分钟，稍等后访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//neurowave.tech</span><br></code></pre></td></tr></table></figure><p>如果看到最新内容，说明部署成功！🎉</p><h2 id="5-本地更新博客并推送"><a href="#5-本地更新博客并推送" class="headerlink" title="5. 本地更新博客并推送"></a><strong>5. 本地更新博客并推送</strong></h2><p>当你本地修改博客内容后，使用以下命令提交并触发 GitHub Actions：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;Update blog content&quot;</span><br>git push origin master <br></code></pre></td></tr></table></figure><p>然后等待 GitHub Actions 自动更新你的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h2><ul><li><strong>配置 GitHub Actions</strong>，让博客自动部署。</li><li><strong>创建 <code>CNAME</code> 文件，并确保 Hexo 部署时不会丢失自定义域名</strong>。</li><li><strong>每次 <code>git push</code>，GitHub Actions 自动触发部署</strong>。</li><li><strong>GitHub Pages 自动更新，无需手动运行 <code>hexo deploy</code></strong>。</li></ul><p>这样，你的 Hexo 博客就实现了 <strong>全自动化部署，并且保留自定义域名</strong> 🎉！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>SSH</tag>
      
      <tag>domain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="/2025/02/01/1-%E4%BD%BF%E7%94%A8-GitHub-Actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/02/01/1-%E4%BD%BF%E7%94%A8-GitHub-Actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>在本篇博客中，我们将介绍如何使用 <strong>GitHub Actions</strong> 来实现 <strong>Hexo 博客的自动化部署</strong>，让你每次提交新文章时，GitHub Actions 自动编译并部署你的博客到 GitHub Pages，无需手动执行 <code>hexo deploy</code>。同时，我们也会介绍如何使用专门的 <code>gh-pages</code>（或你命名的 <code>ph-pages</code>）分支来存放生成的静态页面，从而保持源码和生成文件的分离。</p><hr><h2 id="1-配置-GitHub-Actions"><a href="#1-配置-GitHub-Actions" class="headerlink" title="1. 配置 GitHub Actions"></a><strong>1. 配置 GitHub Actions</strong></h2><h3 id="1-1-创建-github-workflows-deploy-yml-文件"><a href="#1-1-创建-github-workflows-deploy-yml-文件" class="headerlink" title="1.1 创建 .github/workflows/deploy.yml 文件"></a><strong>1.1 创建 <code>.github/workflows/deploy.yml</code> 文件</strong></h3><p>在你的 Hexo 博客根目录下执行以下命令，创建 GitHub Actions 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p .github/workflows<br>nano .github/workflows/deploy.yml<br></code></pre></td></tr></table></figure><p>在 <strong>deploy.yml</strong> 文件中添加以下内容（如果你的远程仓库默认分支为 <code>master</code>，则触发条件与拉取分支都使用 <code>master</code>；如果你使用其他分支，请相应调整）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span>             <span class="hljs-comment"># GitHub Actions 的名称，可自行命名</span><br><br><span class="hljs-comment"># 当 push 事件发生时触发部署</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span>                       <span class="hljs-comment"># 当推送到 master 分支时触发部署（根据你的分支选择）</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>          <span class="hljs-comment"># 运行环境选择最新的 Ubuntu</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># 步骤 1：拉取代码</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">repository</span>     <span class="hljs-comment"># 从 GitHub 仓库拉取代码</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span>                   <span class="hljs-comment"># 拉取 master 分支代码</span><br><br>    <span class="hljs-comment"># 步骤 2：设置 Node 环境</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span>           <span class="hljs-comment"># 安装 Node.js 环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;v22&#x27;</span>           <span class="hljs-comment"># 设置 Node.js 版本</span><br><br>    <span class="hljs-comment"># 步骤 3：安装依赖</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>    <span class="hljs-comment"># 安装 Hexo 和相关依赖</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install -g hexo-cli     # 安装 Hexo 命令行工具</span><br><span class="hljs-string">        npm install                 # 安装项目依赖</span><br><span class="hljs-string"></span><br>    <span class="hljs-comment"># 步骤 4：生成静态文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span>            <span class="hljs-comment"># 使用 Hexo 生成静态文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean                  # 清理旧的生成文件</span><br><span class="hljs-string">        hexo generate               # 生成新的静态文件</span><br><span class="hljs-string"></span><br>    <span class="hljs-comment"># 步骤 5：部署到 GitHub Pages (部署到 gh-pages 分支)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span>   <span class="hljs-comment"># 使用 Hexo 部署到 GitHub Pages</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span>   <span class="hljs-comment"># 使用 GitHub Secrets 中存储的 SSH 私钥</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">&lt;Git</span> <span class="hljs-string">用户名&gt;</span>                           <span class="hljs-comment"># Git 用户名</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">&lt;Git用户邮箱&gt;</span>             <span class="hljs-comment"># Git 用户邮箱</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        mkdir -p ~/.ssh/                              # 创建 SSH 配置目录</span><br><span class="hljs-string">        echo &quot;$SSH_PRIVATE_KEY&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa  # 将私钥写入文件</span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa                       # 设置私钥权限</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts  # 添加 GitHub 的 SSH 公钥到 known_hosts</span><br><span class="hljs-string">        git config --global user.name &quot;$GIT_NAME&quot;     # 配置 Git 用户名</span><br><span class="hljs-string">        git config --global user.email &quot;$GIT_EMAIL&quot;    # 配置 Git 用户邮箱</span><br><span class="hljs-string">        hexo deploy                                   # 使用 Hexo 部署博客</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>  </p><ol><li>在 Hexo 配置文件 <code>_config.yml</code> 中，部署部分应配置为使用 <code>gh-pages</code> 分支（或你命名的 <code>ph-pages</code> 分支），例如：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你的用户名/你的仓库.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span>   <span class="hljs-comment"># 或者根据你的实际情况设置为 ph-pages</span><br></code></pre></td></tr></table></figure></li><li>这样可以保证你的源代码存放在 <code>master</code> 分支，而生成的静态页面将推送到 <code>gh-pages</code> 分支，从而使博客部署更清晰规范。</li></ol></blockquote><hr><h2 id="2-配置-SSH-密钥"><a href="#2-配置-SSH-密钥" class="headerlink" title="2. 配置 SSH 密钥"></a><strong>2. 配置 SSH 密钥</strong></h2><h3 id="2-1-生成-SSH-密钥"><a href="#2-1-生成-SSH-密钥" class="headerlink" title="2.1 生成 SSH 密钥"></a><strong>2.1 生成 SSH 密钥</strong></h3><h4 id="检查是否已有-SSH-密钥"><a href="#检查是否已有-SSH-密钥" class="headerlink" title="检查是否已有 SSH 密钥"></a><strong>检查是否已有 SSH 密钥</strong></h4><p>你可以运行下面的命令来确认是否已有 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></figure><p>如果看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code>，说明你已经生成了 SSH 密钥。</p><h4 id="查看密钥内容"><a href="#查看密钥内容" class="headerlink" title="查看密钥内容"></a><strong>查看密钥内容</strong></h4><ul><li><strong>查看私钥</strong>（不要泄露此文件）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure></li><li><strong>查看公钥</strong>（可公开分享）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li></ul><h4 id="生成新的-SSH-密钥（如果没有）"><a href="#生成新的-SSH-密钥（如果没有）" class="headerlink" title="生成新的 SSH 密钥（如果没有）"></a><strong>生成新的 SSH 密钥（如果没有）</strong></h4><p>如果没有密钥，可以使用下面的命令生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>替换 <code>&quot;your_email@example.com&quot;</code> 为你的 GitHub 绑定邮箱，然后一路按 <strong>Enter</strong> 即可。</p><blockquote><p>注意：如果 Github 说公钥 <code>已经被使用</code> ，可以使用命令再次生成私钥和公钥，同时去 Github 修改项目下的 <code>Setting</code> 就可以了。</p></blockquote><hr><h3 id="2-2-添加公钥到-GitHub"><a href="#2-2-添加公钥到-GitHub" class="headerlink" title="2.2 添加公钥到 GitHub"></a><strong>2.2 添加公钥到 GitHub</strong></h3><ol><li>进入 GitHub 仓库页面，点击 <strong>Settings</strong> → <strong>Deploy keys</strong>。</li><li>点击 <strong>“Add deploy key”</strong>。</li><li>在 <strong>Title</strong> 中填写 “GitHub Actions Key”。</li><li>在 <strong>Key</strong> 中粘贴你通过 <code>cat ~/.ssh/id_rsa.pub</code> 获取的公钥内容。</li><li>勾选 <strong>“Allow write access”</strong> 以允许写入权限。</li><li>点击 <strong>“Add key”</strong> 完成设置。</li></ol><hr><h3 id="2-3-添加私钥到-GitHub-Secrets"><a href="#2-3-添加私钥到-GitHub-Secrets" class="headerlink" title="2.3 添加私钥到 GitHub Secrets"></a><strong>2.3 添加私钥到 GitHub Secrets</strong></h3><ol><li>进入 GitHub 仓库页面，点击 <strong>Settings</strong> → <strong>Secrets and variables</strong> → <strong>Actions</strong>。</li><li>点击 <strong>“New repository secret”</strong>。</li><li>将 <strong>Name</strong> 填写为 <code>SSH_PRIVATE</code>。</li><li>将 <strong>Value</strong> 粘贴你私钥（<code>id_rsa</code>）的内容。</li><li>点击 <strong>“Add secret”</strong> 完成设置。</li></ol><blockquote><p>注意：前面 <strong>deploy.yml</strong> 文件中配置了 <code>SSH_PRIVATE_KEY: $&#123;&#123; secrets.SSH_PRIVATE &#125;&#125;</code> 其中 <code>SSH_PRIVATE</code> 与你写的 <code>Name</code> 对应即可。</p></blockquote><hr><h2 id="3-提交并触发-GitHub-Actions"><a href="#3-提交并触发-GitHub-Actions" class="headerlink" title="3. 提交并触发 GitHub Actions"></a><strong>3. 提交并触发 GitHub Actions</strong></h2><p>将 <code>deploy.yml</code> 文件提交到仓库，以触发 GitHub Actions 自动部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .github/workflows/deploy.yml<br>git commit -m <span class="hljs-string">&quot;Add GitHub Actions for Hexo deployment&quot;</span><br>git push origin master  <span class="hljs-comment"># 如果你的远程分支是 master</span><br></code></pre></td></tr></table></figure><p>推送代码后，GitHub Actions 会自动运行部署流程，并将 Hexo 生成的静态文件推送到 <code>gh-pages</code> 分支。</p><h3 id="测试-SSH-连接到-GitHub"><a href="#测试-SSH-连接到-GitHub" class="headerlink" title="测试 SSH 连接到 GitHub"></a><strong>测试 SSH 连接到 GitHub</strong></h3><p>在 SSH 设置完成后，你可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果成功，你会看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi ArtinTYT! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="4-检查部署状态"><a href="#4-检查部署状态" class="headerlink" title="4. 检查部署状态"></a><strong>4. 检查部署状态</strong></h2><h3 id="4-1-查看-GitHub-Actions-状态"><a href="#4-1-查看-GitHub-Actions-状态" class="headerlink" title="4.1 查看 GitHub Actions 状态"></a><strong>4.1 查看 GitHub Actions 状态</strong></h3><ol><li>打开 GitHub 仓库页面，点击 <strong>Actions</strong> 选项卡。</li><li>查看最新的 Workflow 运行记录。如果显示绿色 ✅，说明部署成功；否则查看日志查找错误信息。</li></ol><h3 id="4-2-配置-GitHub-Pages"><a href="#4-2-配置-GitHub-Pages" class="headerlink" title="4.2 配置 GitHub Pages"></a><strong>4.2 配置 GitHub Pages</strong></h3><p>进入 GitHub 仓库页面：</p><ol><li>点击 <strong>Settings</strong> → <strong>Pages</strong>。</li><li>将 <strong>Source</strong> 设置为 <code>gh-pages</code>（或你使用的分支，如 ph-pages）。</li><li>保存设置，等待几分钟后访问：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://artintyt.github.io<br></code></pre></td></tr></table></figure>如果页面显示你的博客内容，则部署成功。</li></ol><h2 id="5-本地更新博客并触发部署"><a href="#5-本地更新博客并触发部署" class="headerlink" title="5. 本地更新博客并触发部署"></a><strong>5. 本地更新博客并触发部署</strong></h2><p>当你在本地更新博客内容后，使用以下命令提交并推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><p>GitHub Actions 会自动运行并更新静态页面到 <code>gh-pages</code> 分支，GitHub Pages 会随之更新。</p><p>然后等待 GitHub Actions 自动更新你的博客。</p><blockquote><p>注意：当要修改 <code>.github/workflows/deploy.yml</code> 文件时，记得切换到 <code>master</code> 分支，使用以下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout master <br></code></pre></td></tr></table></figure></blockquote><p>记得修改后要提交更改，使用一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add <span class="hljs-built_in">source</span>/_posts/使用-GitHub-xxxx.md<br>git commit -m <span class="hljs-string">&quot;Save changes to the GitHub Actions deployment post&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="6-参数的安全隐患及优化方式"><a href="#6-参数的安全隐患及优化方式" class="headerlink" title="6. 参数的安全隐患及优化方式"></a>6. 参数的安全隐患及优化方式</h2><p>如何安全地存储敏感信息，使用 GitHub Secrets 代替明文配置，你的 <strong>deploy.yml</strong> 里目前可能有类似的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">&lt;your</span> <span class="hljs-string">username&gt;</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">&lt;your</span> <span class="hljs-string">email</span> <span class="hljs-string">address&gt;</span><br></code></pre></td></tr></table></figure><h3 id="优化方式：使用-Secret-变量名替代"><a href="#优化方式：使用-Secret-变量名替代" class="headerlink" title="优化方式：使用 Secret 变量名替代"></a>优化方式：使用 Secret 变量名替代</h3><ol><li>进入你的 <strong>GitHub 仓库</strong> → <strong>Settings</strong> → <strong>Secrets and variables</strong> → <strong>Actions</strong></li><li>点击 <strong>New repository secret</strong> 创建 Secrets 变量（之前<code>SSH_PRIVATE</code>同样的地方）：</li></ol><ul><li>GIT_NAME → <code>&lt;your username&gt;</code></li><li>GIT_EMAIL → <code>&lt;your email address&gt;</code></li><li>SSH_PRIVATE_KEY → 存储你的 SSH 私钥</li><li>点击 <strong>Add secret</strong></li></ul><ol start="3"><li>修改 deploy.yml，使用 Secrets：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GIT_NAME</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GIT_EMAIL</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这样，即使别人能看到 <strong>deploy.yml</strong> 文件，也无法获取你的邮箱和 SSH 私钥。</p><h2 id="7-GitHub-Actions-的优点"><a href="#7-GitHub-Actions-的优点" class="headerlink" title="7. GitHub Actions 的优点"></a><strong>7. GitHub Actions 的优点</strong></h2><p>使用 GitHub Actions 有以下几个明显的优点：</p><ul><li><strong>自动化部署：</strong> 每次代码提交后自动触发构建和部署流程，无需手动干预。</li><li><strong>持续集成：</strong> 可集成测试、代码检查等流程，确保部署前代码质量。</li><li><strong>高度自定义：</strong> 支持自定义工作流程和并行任务，可根据项目需求灵活配置。</li><li><strong>跨平台支持：</strong> 支持在 Ubuntu、Windows、macOS 等不同平台上运行，无需额外环境搭建。</li><li><strong>与 GitHub 深度集成：</strong> 无需额外配置第三方 CI&#x2F;CD 工具，所有操作均在 GitHub 平台上完成。</li><li><strong>易于监控和调试：</strong> 提供详细的日志记录，可在 GitHub Actions 页面直观查看每一步执行状态。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><strong>配置 GitHub Actions</strong>：实现博客自动部署，无需手动执行 <code>hexo deploy</code>。</li><li><strong>设置 SSH 密钥</strong>：保证 GitHub Actions 有权限将生成的静态页面推送到 <code>gh-pages</code> 分支。</li><li><strong>分支管理</strong>：源代码存放在 <code>master</code> 分支，生成的静态页面存放在 <code>gh-pages</code>（或 ph-pages）分支，使仓库结构清晰。</li><li><strong>持续自动化</strong>：每次 <code>git push</code> 后，GitHub Actions 自动触发部署流程，确保博客内容始终保持最新状态。</li></ul><p>通过以上配置，你的 Hexo 博客将实现全自动化部署，并利用 GitHub Actions 强大的集成优势，让博客更新变得轻松高效！🎉</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conda环境配置</title>
    <link href="/2025/01/24/2-conda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/24/2-conda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>以下步骤基于 MacOS 系统（MacBookAir M2），如果是 Windows 系统，命令会不同。</p><h2 id="1-官网下载安装"><a href="#1-官网下载安装" class="headerlink" title="1. 官网下载安装"></a>1. 官网下载安装</h2><p>下载mini conda：<a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><h3 id="1-1-安装完成后测试"><a href="#1-1-安装完成后测试" class="headerlink" title="1.1 安装完成后测试"></a>1.1 安装完成后测试</h3><p>使用以下命令查看版本和测试安装是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda --verison<br></code></pre></td></tr></table></figure><p>Terminal显示如下状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">conda 24.11.1<br></code></pre></td></tr></table></figure><h3 id="1-2-验证Base环境"><a href="#1-2-验证Base环境" class="headerlink" title="1.2 验证Base环境"></a>1.2 验证Base环境</h3><p>Conda 的 (base) 表示你已经激活了默认环境。如果想查看安装的环境列表，可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><p>可能会看到下面的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                 * /opt/miniconda3<br></code></pre></td></tr></table></figure><h3 id="1-3-查看默认Python版本"><a href="#1-3-查看默认Python版本" class="headerlink" title="1.3 查看默认Python版本"></a>1.3 查看默认Python版本</h3><p>查看 conda 默认的 Python 版本，后面会创建指定 Python 某版本的环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python --version<br></code></pre></td></tr></table></figure><p>可能看到（默认的，可能新 Conda 环境不会使用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">Python 3.12.8<br></code></pre></td></tr></table></figure><h2 id="2-Conda常用命令"><a href="#2-Conda常用命令" class="headerlink" title="2. Conda常用命令"></a>2. Conda常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda –<span class="hljs-built_in">help</span> <span class="hljs-comment"># 查看帮助</span><br>conda info <span class="hljs-comment"># 查看 conda 信息</span><br>conda version  <span class="hljs-comment"># 查看 conda 版本</span><br>conda update conda  <span class="hljs-comment"># 更新Conda（慎用）</span><br>conda clean –all <span class="hljs-comment"># 清理不再需要的包</span><br>conda &lt;指令&gt; <span class="hljs-built_in">help</span> <span class="hljs-comment"># 查看某一个指令的详细帮助</span><br>conda config show <span class="hljs-comment">#查看 conda 的环境配置</span><br>conda clean -p  <span class="hljs-comment"># 清理没有用，没有安装的包</span><br>conda clean -t  <span class="hljs-comment"># 清理 tarball</span><br>conda clean all  <span class="hljs-comment"># 清理所有包和 conda 的缓存文件</span><br></code></pre></td></tr></table></figure><h2 id="3-环境管理"><a href="#3-环境管理" class="headerlink" title="3. 环境管理"></a>3. 环境管理</h2><h3 id="3-1-查看-Conda-环境路径是否正确设置"><a href="#3-1-查看-Conda-环境路径是否正确设置" class="headerlink" title="3.1 查看 Conda 环境路径是否正确设置"></a>3.1 查看 Conda 环境路径是否正确设置</h3><p>通过一下命令查看环境设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">conda config --show<br></code></pre></td></tr></table></figure><p>可能会看到你的环境存储路径如下：<br>1.<code>/opt/miniconda3/envs</code>（默认路径，位于 Miniconda 安装目录）<br>2.<code>/Users/username/.conda/envs</code>（用户目录下的备用路径）</p><p>这些路径是 Conda 的默认配置，如果你对存储位置没有特别要求，无需修改 <code>envs_dirs</code>。</p><h3 id="3-2-envs-dirs是什么？"><a href="#3-2-envs-dirs是什么？" class="headerlink" title="3.2 envs_dirs是什么？"></a>3.2 envs_dirs是什么？</h3><p>在 Conda 中，<code>envs</code> 是用来存储 虚拟环境（environments） 的目录。虚拟环境是一个独立的 Python 运行环境，包含特定的 Python 版本以及该环境所需的库和依赖。</p><h4 id="什么是-Conda-环境？"><a href="#什么是-Conda-环境？" class="headerlink" title="什么是 Conda 环境？"></a>什么是 Conda 环境？</h4><p>Conda 环境是一种隔离机制，用于防止不同项目之间的库和依赖冲突。每个环境都可以有自己的：</p><ul><li>Python 版本（例如 <code>Python 3.8</code> 或 <code>Python 3.12</code>）。</li><li>库版本（例如 <code>NumPy 1.20</code> 和 <code>NumPy 1.25</code> 可以在不同环境中共存）。</li><li>配置和依赖。</li></ul><h4 id="envs-是做什么的？"><a href="#envs-是做什么的？" class="headerlink" title="envs 是做什么的？"></a>envs 是做什么的？</h4><p>Conda 使用 <code>envs</code> 目录来存储所有的虚拟环境。默认情况下：</p><ul><li>主环境 (base) 会存储在 Conda 的安装目录（例如 <code>/opt/miniconda3</code> 或 <code>/opt/anaconda3</code>）。</li><li>其他环境 会存储在 <code>envs</code> 文件夹中。例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认路径下，`envs` 的位置</span><br>/opt/miniconda3/envs/<br></code></pre></td></tr></table></figure>  每个虚拟环境都会有一个独立的子目录。例如，如果你创建了名为 myenv 的环境，它可能位于：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/miniconda3/envs/myenv/<br></code></pre></td></tr></table></figure></li></ul><h4 id="为什么需要-Conda-环境？"><a href="#为什么需要-Conda-环境？" class="headerlink" title="为什么需要 Conda 环境？"></a>为什么需要 Conda 环境？</h4><p>以下是使用 Conda 环境的几个关键优势：</p><ol><li>避免冲突：不同项目可能需要不同的 Python 和库版本，环境隔离可以避免这些冲突。</li><li>提高灵活性：可以根据需求快速切换环境。</li><li>可移植性：可以轻松导出和导入环境（通过 <code>.yml</code> 文件）。</li><li>安全性：在独立环境中安装和测试库，不会影响系统全局配置。</li></ol><h3 id="3-3-如何管理-Conda-环境？"><a href="#3-3-如何管理-Conda-环境？" class="headerlink" title="3.3 如何管理 Conda 环境？"></a>3.3 如何管理 Conda 环境？</h3><h4 id="1-查看现有-Conda-环境"><a href="#1-查看现有-Conda-环境" class="headerlink" title="1. 查看现有 Conda 环境"></a>1. 查看现有 Conda 环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><h4 id="2-创建新环境"><a href="#2-创建新环境" class="headerlink" title="2. 创建新环境"></a>2. 创建新环境</h4><p>使用 conda 可以创建相互隔离的 Python 环境，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法</span><br>conda create name &lt;env_name&gt; python=&lt;version&gt; [package_name1]<br>[package_name2] [...]<br><br><span class="hljs-comment"># 样例 创建一个名为 learn 的环境，python 版本为3.10是3.10.XX最新的版本。</span><br>conda create name modelscope python=3.10 <br><span class="hljs-comment"># name 可以简写为 -n</span><br></code></pre></td></tr></table></figure><p>如果不指定 Python 版本，默认是 base 里面的 Python 版本。</p><p>通过 <code>conda env list</code> 查看刚刚创建的环境如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                 * /opt/miniconda3<br>modelscope             /opt/miniconda3/envs/modelscope<br></code></pre></td></tr></table></figure><p>可以看到有一个新的环境叫 <code>modelscope</code>。</p><h4 id="3-激活-切换-环境"><a href="#3-激活-切换-环境" class="headerlink" title="3. 激活(切换)环境"></a>3. 激活(切换)环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate modelscope<br></code></pre></td></tr></table></figure><h4 id="4-退出环境"><a href="#4-退出环境" class="headerlink" title="4. 退出环境"></a>4. 退出环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure><h4 id="5-删除环境"><a href="#5-删除环境" class="headerlink" title="5. 删除环境"></a>5. 删除环境</h4><p>退出到 <code>base</code> 环境再执行删除环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法：conda remove --name &lt;conda name&gt; --all</span><br><br>conda remove --name modelscope --all<br></code></pre></td></tr></table></figure><h4 id="6-克隆环境"><a href="#6-克隆环境" class="headerlink" title="6. 克隆环境"></a>6. 克隆环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法：conda create --name &lt;NEW_ENV_NAME&gt; --clone &lt;OLD_ENV_NAME&gt;</span><br><br>conda create --name NEWclone --<span class="hljs-built_in">clone</span> modelscope<br></code></pre></td></tr></table></figure><h4 id="6-指定-envs-目录"><a href="#6-指定-envs-目录" class="headerlink" title="6. 指定 envs 目录"></a>6. 指定 envs 目录</h4><p>默认情况下，Conda 会将环境存储在其安装目录的 <code>envs</code> 文件夹中。如果需要自定义，可以通过设置 <code>envs_dirs</code> 改变存储路径（例如将环境存储到外部硬盘）。</p><p>设置命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add envs_dirs /path/to/custom_envs<br></code></pre></td></tr></table></figure><h4 id="7-导出环境"><a href="#7-导出环境" class="headerlink" title="7. 导出环境"></a>7. 导出环境</h4><p>将当前环境导出为一个YAML文件，方便共享：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法 conda env export &gt; &lt;filename.yml&gt;</span><br>conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> &gt; environment.yml<br></code></pre></td></tr></table></figure><p>项目经理可能给你一个配置文件，然后用配置文件创建新的环境。</p><h4 id="8-导入环境：从文件创建环境"><a href="#8-导入环境：从文件创建环境" class="headerlink" title="8. 导入环境：从文件创建环境"></a>8. 导入环境：从文件创建环境</h4><p>使用YAML文件创建一个新环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法 conda env create -f &lt;filename.yml&gt; -n &lt;new environment name&gt;</span><br>conda <span class="hljs-built_in">env</span> create -f environment.yml -n newenvi<br></code></pre></td></tr></table></figure><p>如果不指定新名字， 可以不加后面 <code>-n &lt;new environment name&gt;</code>。</p><h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><ul><li><code>envs</code> 是 Conda 用来存储虚拟环境的文件夹。</li><li>Conda 环境有助于管理不同项目的依赖，避免冲突。</li><li>默认配置已经足够大部分场景，只有特殊需求时才需要修改 <code>envs</code> 的存储路径。</li></ul><h2 id="4-包管理"><a href="#4-包管理" class="headerlink" title="4. 包管理"></a>4. 包管理</h2><p>一旦激活了环境，你就可以使用 conda 在当前环境下安装你所需要的包。</p><h3 id="4-1-安装包"><a href="#4-1-安装包" class="headerlink" title="4.1 安装包"></a>4.1 安装包</h3><p>在激活的环境中安装包，例如安装NumPy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install numpy<br></code></pre></td></tr></table></figure><p>没有指定是最新版本，一般项目会指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install numpy=1.18<br></code></pre></td></tr></table></figure><p>可以查看已经下好的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip list<br></code></pre></td></tr></table></figure><h3 id="4-2-更新包"><a href="#4-2-更新包" class="headerlink" title="4.2 更新包"></a>4.2 更新包</h3><p>更新某个包到最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda update numpy<br></code></pre></td></tr></table></figure><p>更新<strong>所有</strong>包到最新版本，但是不建议用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda update --all<br></code></pre></td></tr></table></figure><p>执行命令后，Conda 将会对版本进行比较并列出可以升级的版本。同时，也会告知用<br>户其他相关包也会升级到相应版本。当较新的版本可以用于升级时，终端会显示<br>Proceed ([y]&#x2F;n)? ，此时输入 y 即可进行升级。</p><h3 id="4-3-卸载包"><a href="#4-3-卸载包" class="headerlink" title="4.3 卸载包"></a>4.3 卸载包</h3><p>如果不再需要某个包，可以将其卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove numpy<br></code></pre></td></tr></table></figure><h3 id="4-4-查看环境所有包"><a href="#4-4-查看环境所有包" class="headerlink" title="4.4 查看环境所有包"></a>4.4 查看环境所有包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda list<br></code></pre></td></tr></table></figure><p>查看当前环境中已经安装的所有包（base 和 项目环境<code>&lt;modelscope&gt;</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda list<br></code></pre></td></tr></table></figure><h3 id="4-5-搜索包"><a href="#4-5-搜索包" class="headerlink" title="4.5 搜索包"></a>4.5 搜索包</h3><p>搜索可用的包及其版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda search &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h2 id="5-使用通道"><a href="#5-使用通道" class="headerlink" title="5. 使用通道"></a>5. 使用通道</h2><p>Conda 通道（Channel）是 Conda 用来查找和下载软件包的源。通道就像是软件仓库，用户可以从这些通道中获取需要的软件包。理解和有效管理 Conda 通道，可以帮助用户更好地控制软件包的来源、版本以及稳定性。</p><h3 id="5-1-主要通道"><a href="#5-1-主要通道" class="headerlink" title="5.1 主要通道"></a>5.1 主要通道</h3><ul><li><strong>默认通道</strong>：这是Conda自带的官方通道，由 Anaconda 维护，包含了常用的数据科学和机器学习包。默认通道提供的包经过测试和优化，通常是稳定且值得信赖的。</li><li><strong>Conda-Forge</strong>：Conda-Forge是一个社区驱动的通道，拥有数量庞大的软件包和活跃的维护者社区。通常情况下，Conda-Forge提供更多的最新软件包版本，对于一些在默认通道中没有的包来说尤为重要。由于是社区维护，更新速度快，适合需要最新特性和支持的用户。</li><li><strong>Bioconda</strong>：专为生物信息学和生物数据分析设计的通道。包含很多用于生物数据处理和分析的工具。</li></ul><h3 id="5-2-查看已配置的通道"><a href="#5-2-查看已配置的通道" class="headerlink" title="5.2 查看已配置的通道"></a>5.2 查看已配置的通道</h3><p>令查看当前配置的通道列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --show channels<br></code></pre></td></tr></table></figure><h3 id="5-3-添加新的通道"><a href="#5-3-添加新的通道" class="headerlink" title="5.3 添加新的通道"></a>5.3 添加新的通道</h3><p>如果需要从其他通道安装包，可以将其添加到Conda配置中。例如，添加CondaForge：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels conda-forge<br></code></pre></td></tr></table></figure><h3 id="5-4-设置通道顺序"><a href="#5-4-设置通道顺序" class="headerlink" title="5.4 设置通道顺序"></a>5.4 设置通道顺序</h3><p>通道是按顺序搜索的，优先使用在前面的通道。可以通过以下命令调整顺序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> channel_priority strict<br></code></pre></td></tr></table></figure><p>使用 <code>strict</code> 优先级时，Conda 会严格按照通道顺序来选择包。</p><h3 id="5-5-删除通道"><a href="#5-5-删除通道" class="headerlink" title="5.5 删除通道"></a>5.5 删除通道</h3><p>如果不需要某个通道，可以将其移除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config remove channels &lt;channel-name&gt;<br></code></pre></td></tr></table></figure><h3 id="5-6-临时使用特定通道"><a href="#5-6-临时使用特定通道" class="headerlink" title="5.6 临时使用特定通道"></a>5.6 临时使用特定通道</h3><p>你可以在安装包时临时指定通道，而不改变全局配置。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install package-name -c conda-forge<br></code></pre></td></tr></table></figure><p>这样做会从 Conda-Forge 通道安装指定的包。</p><h3 id="5-7-通道优先级"><a href="#5-7-通道优先级" class="headerlink" title="5.7 通道优先级"></a>5.7 通道优先级</h3><p>Conda 允许设置通道优先级，以决定从哪个通道下载软件包。默认情况下，Conda会<br>根据通道列表的顺序依次查找包。你可以通过以下命令启用或禁用通道优先级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config <span class="hljs-built_in">set</span> channel_priority <span class="hljs-literal">true</span>  <span class="hljs-comment"># 启用优先级</span><br>conda config <span class="hljs-built_in">set</span> channel_priority <span class="hljs-literal">false</span> <span class="hljs-comment"># 禁用优先级</span><br></code></pre></td></tr></table></figure><p>启用优先级后，Conda会严格根据通道顺序来选择包，确保从首选通道安装。</p><h3 id="5-8-创建自定义通道"><a href="#5-8-创建自定义通道" class="headerlink" title="5.8 创建自定义通道"></a>5.8 创建自定义通道</h3><p>如果你需要在团队中共享包，或者需要托管私有包，可以创建自己的Conda通道。自定义通道可以通过简单的 HTTP 服务器（如 NGINX 或 Apache）托管，或者使用 Anaconda 的企业解决方案。</p><h2 id="6-设置镜像"><a href="#6-设置镜像" class="headerlink" title="6. 设置镜像"></a>6. 设置镜像</h2><p>为了提高 Conda 包的下载速度，特别是在网络连接到默认的 Conda 服务器速度较慢的情况下,设置国内镜像（或其他更接近你的地理位置的镜像）是一个常见且有效的方法。</p><h3 id="6-1-设置-Conda-镜像的步骤"><a href="#6-1-设置-Conda-镜像的步骤" class="headerlink" title="6.1 设置 Conda 镜像的步骤"></a>6.1 设置 Conda 镜像的步骤</h3><h4 id="方法一：通过命令行配置"><a href="#方法一：通过命令行配置" class="headerlink" title="方法一：通过命令行配置"></a>方法一：通过命令行配置</h4><p>你可以使用conda config命令来添加镜像。例如，使用清华大学的Anaconda镜像。</p><ul><li>打开命令提示符或终端。</li><li>添加镜像URL：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda<br>conda config add channels<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo<br>conda config <span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure>  默认情况下，conda config 添加的通道会排在列表的头部，但你可以通过以下命令来<br>确认顺序：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config show channels<br></code></pre></td></tr></table></figure></li></ul><h4 id="方法二：通过修改配置文件"><a href="#方法二：通过修改配置文件" class="headerlink" title="方法二：通过修改配置文件"></a>方法二：通过修改配置文件</h4><p>你也可以直接修改 Conda 的配置文件来设置镜像：</p><ul><li>找到并编辑 Conda 的配置文件：<code>~/.condarc</code>（Linux和macOS）或 <code>C:\Users&lt;用户名&gt;.condarc</code>（Windows）。TUNA 提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，各系统都可以通过修改用户目录下的 <code>.condarc</code> 文件来使用 TUNA 镜像源。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，可先执行 <code>conda config –set show_channel_urls yes</code> 生成该文件之后再修改。</li><li>添加或修改如下内容：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">channels:<br>- defaults<br>show_channel_urls: <span class="hljs-literal">true</span><br>default_channels:<br>- https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>- https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>- https: mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>conda-forge: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>msys2: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>bioconda: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>menpo: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>pytorch: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>pytorch-lts: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>simpleitk: https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>deepmodeling:<br>https: mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/<br></code></pre></td></tr></table></figure></li></ul><p>运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><h4 id="验证和测试"><a href="#验证和测试" class="headerlink" title="验证和测试"></a>验证和测试</h4><p>在设置完镜像后，你可以通过安装软件包来测试镜像是否工作正常。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install numpy<br></code></pre></td></tr></table></figure><p>查看输出的信息，确保包是从你设置的镜像URL下载的。</p><h2 id="Mamba-使用"><a href="#Mamba-使用" class="headerlink" title="Mamba 使用"></a>Mamba 使用</h2><p>Mamba 是一个用于管理 Conda 环境和包的开源工具，旨在解决 Conda 在处理大型环境时的速度和性能问题。它与 Conda 兼容，但提供更快的依赖解析和包安装，这使得它在处理复杂环境时更加高效。</p><h3 id="Mamba-的关键特点"><a href="#Mamba-的关键特点" class="headerlink" title="Mamba 的关键特点"></a>Mamba 的关键特点</h3><ul><li><strong>快速的依赖解析</strong>： Mamba 使用一个高效的 C++ 库进行依赖解析，这使得在面对复杂的包依赖时能更快地找到解决方案。</li><li><strong>并行下载</strong>：Mamba 可以并行下载和安装包，这大大减少了安装时间，特别是在需要下载大量包的情况下。</li><li><strong>与 Conda 兼容</strong>：Mamba 可以无缝替代 Conda 的命令，你可以在几乎所有 Conda 命令中直接使用 mamba 来替换 conda。</li><li><strong>更好的用户体验</strong>：提供更直观的输出信息和进度条，让用户可以更清晰地了解安装进度和过程。</li></ul><h3 id="安装-Mamba"><a href="#安装-Mamba" class="headerlink" title="安装 Mamba"></a>安装 Mamba</h3><p>要安装 Mamba，你首先需要一个 Conda 环境。以下是在已有 Conda 环境中安装 Mamba 的步骤：<br>如果你希望在特定环境中安装 Mamba，可以先激活该环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate myenv<br></code></pre></td></tr></table></figure><p>你可以通过 Conda-Forge 通道安装 Mamba，因为 Mamba 在该通道上维护得很好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install mamba -n base -c conda-forge<br></code></pre></td></tr></table></figure><p>这里 <code>-n base</code> 表示将 Mamba 安装在 base 环境中，这样你可以在任何环境中使用 Mamba。</p><h3 id="使用-Mamba"><a href="#使用-Mamba" class="headerlink" title="使用 Mamba"></a>使用 Mamba</h3><p>Mamba可以直接替代 Conda 的命令。以下是一些常见的 Conda 命令及其 Mamba 等效用法：</p><ul><li>创建环境：mamba create –name myenv python&#x3D;3.8</li><li>激活环境：conda activate myenv （Mamba不改变环境激活命令，你仍然使用 Conda 的激活命令）</li><li>安装包：mamba install numpy</li><li>更新包：mamba update numpy</li><li>删除包：mamba remove numpy</li><li>更新环境中的所有包：mamba update –all</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>速度：Mamba 在处理包管理和环境解决时速度快得多，这对大环境尤其有用。</li><li>效率：并行下载和安装机制使得整体过程更加高效。</li><li>兼容性：能够无缝替代 Conda，并与其生态系统兼容。</li></ul><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>新兴工具：作为一个较新的工具，Mamba可能在某些边缘情况下不如 Conda 稳定。</li><li>社区支持：虽然 Mamba 的社区在快速增长，但它仍然没有 Conda 那么成熟。</li></ul><h2 id="Jupyter-Lab-使用"><a href="#Jupyter-Lab-使用" class="headerlink" title="Jupyter Lab 使用"></a>Jupyter Lab 使用</h2><h3 id="Jupyter-介绍"><a href="#Jupyter-介绍" class="headerlink" title="Jupyter 介绍"></a>Jupyter 介绍</h3><p>JupyterLab 是最新的基于 Web 的交互式开发环境，适用于 notebooks、代码和数据。其灵活的界面允许用户配置和安排数据科学、科学计算、计算新闻和机器学习中的工作流程。模块化设计允许扩展来扩展和丰富功能。</p><h3 id="Jupyter-安装使用"><a href="#Jupyter-安装使用" class="headerlink" title="Jupyter 安装使用"></a>Jupyter 安装使用</h3><p>使用 安装 JupyterLab ： pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install jupyterlab<br></code></pre></td></tr></table></figure><p>注意：如果您使用 conda 或 mamba 安装 JupyterLab，我们建议使用 condaforge 通道。安装后，使用以下命令启动 JupyterLab：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter lab<br></code></pre></td></tr></table></figure><h3 id="PyCharm-中使用-Conda-环境"><a href="#PyCharm-中使用-Conda-环境" class="headerlink" title="PyCharm 中使用 Conda 环境"></a>PyCharm 中使用 Conda 环境</h3><ol><li>创建项目所需要的虚拟环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n llamaindex-rag python=3.10<br></code></pre></td></tr></table></figure><ol start="2"><li><p>创建项目，选择 自定义环境 ，类型选择 Conda ，环境选择 <code>llamaindex-rag</code> ，点击 <code>创建</code> 即可.</p></li><li><p>查看项目环境配置</p></li></ol><p>注意：项目中需要另外的依赖库，直接到 <code>Conda Powershell Prompt</code> 终端下，激活 <code>llamaindex-rag</code> 环境，使用 <code>pip</code> 安装依赖库即可！</p><h3 id="关于-modelscope-的常用指令"><a href="#关于-modelscope-的常用指令" class="headerlink" title="关于 modelscope 的常用指令"></a>关于 modelscope 的常用指令</h3><p>我们会先用 conda 创建项目，然后激活项目再下载库或模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">pip install modelscope<br></code></pre></td></tr></table></figure><p>一般在项目中，我们会获得一个 <code>requirements.txt</code> 文件，里面写好了 各种配置的版本 比如 <code>python=3.10</code>，然后使用下面安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r ./requirements.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Conda</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH 连接 GitHub：告别 Token</title>
    <link href="/2025/01/18/1-SSH-%E8%BF%9E%E6%8E%A5-GitHub%EF%BC%9A%E5%91%8A%E5%88%AB-Token/"/>
    <url>/2025/01/18/1-SSH-%E8%BF%9E%E6%8E%A5-GitHub%EF%BC%9A%E5%91%8A%E5%88%AB-Token/</url>
    
    <content type="html"><![CDATA[<p>在我开始使用 GitHub 管理代码和项目的过程中，我一直采用 token 认证的方式进行操作。这种方式简单快捷，适合大多数情况。然而，随着需求的变化，特别是在进行自动化部署时，我意识到使用 SSH 连接 GitHub会更加高效、安全。今天，我想分享一下从 token 认证切换到 SSH 认证的过程，以及成功连接并部署 GitHub 的经历。</p><h2 id="为什么选择-SSH？"><a href="#为什么选择-SSH？" class="headerlink" title="为什么选择 SSH？"></a>为什么选择 SSH？</h2><p>虽然 token 认证在某些情况下非常方便，但它也有一些缺点：</p><ul><li><strong>安全性</strong>：每次操作都需要使用 token，这可能导致 token 泄漏或滥用的风险。</li><li><strong>操作繁琐</strong>：每次访问仓库时，都需要手动输入 token或者将它写入本地PATH中，尤其是在多次推送或拉取代码的情况下会很麻烦。</li></ul><p>相比之下，SSH 认证通过使用公钥和私钥进行加密传输，大大提高了安全性，而且一旦配置完成，就不再需要每次输入凭证。更重要的是，它能为像自动化部署、CI&#x2F;CD 等工作流提供更好的支持。</p><h2 id="从-Token-到-SSH：配置过程"><a href="#从-Token-到-SSH：配置过程" class="headerlink" title="从 Token 到 SSH：配置过程"></a>从 Token 到 SSH：配置过程</h2><h3 id="1-配置-Git-用户名和邮箱"><a href="#1-配置-Git-用户名和邮箱" class="headerlink" title="1. 配置 Git 用户名和邮箱"></a>1. 配置 Git 用户名和邮箱</h3><p>在设置 SSH 之前，首先需要配置你的 Git 用户名和邮箱，这两个信息将用于提交记录中。这也是 Git 操作的基础设置。</p><p>打开终端，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your_email@outlook.com&quot;</span><br></code></pre></td></tr></table></figure><p>根据你的<code>username</code>名字和<code>your_email@outlook.com</code>电子邮件地址。这些信息会出现在每次提交记录中。</p><h3 id="2-生成-SSH-密钥对"><a href="#2-生成-SSH-密钥对" class="headerlink" title="2. 生成 SSH 密钥对"></a>2. 生成 SSH 密钥对</h3><p>接下来，我需要在本地生成一个新的 SSH 密钥对。SSH 密钥对包含两个部分：公钥和私钥，公钥可以分享给 GitHub，而私钥则保存在本地计算机上，始终保持私密。</p><p>生成密钥对，使用 <code>ssh-keygen</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>这里，<code>-t ed25519</code> 表示生成 Ed25519 类型的密钥，<code>-C</code> 后面的参数是一个注释，用于标识该密钥。</p><p>执行命令后，系统会提示你选择密钥文件的存储位置。通常默认存储路径为 <code>~/.ssh/id_ed25519</code>，按 Enter 键即可。</p><p>然后系统会提示你设置一个密码用于加密 SSH 密钥文件。这个密码是可选的，你可以选择不设置，直接按<code>Enter</code>键。</p><h3 id="3-创建-ssh-目录（如果没有）"><a href="#3-创建-ssh-目录（如果没有）" class="headerlink" title="3. 创建 .ssh 目录（如果没有）"></a>3. 创建 .ssh 目录（如果没有）</h3><p>没有会报错：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span>: <span class="hljs-keyword">no</span> such <span class="hljs-keyword">file</span> or directory: /Users/your_username/.ssh<br></code></pre></td></tr></table></figure><p>说明系统中没有 <code>.ssh</code> 目录，可以手动创建该目录。可以使用以下命令来确保目录存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.ssh<br></code></pre></td></tr></table></figure><p>这样就可以创建 <code>.ssh</code> 目录，用于存放你的 SSH 密钥文件。</p><h3 id="4-将-SSH-公钥添加到-GitHub"><a href="#4-将-SSH-公钥添加到-GitHub" class="headerlink" title="4. 将 SSH 公钥添加到 GitHub"></a>4. 将 SSH 公钥添加到 GitHub</h3><p>生成 SSH 密钥对后，下一步是将公钥添加到 GitHub 账户，以便 GitHub 识别你的身份。</p><ol><li><p>打开公钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><p>这将显示你的公钥。复制该公钥内容。</p></li><li><p>登录 GitHub，访问GitHub SSH 设置页面先点头像：<br> <code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code></p></li><li><p>点击 “New SSH key”，输入一个标题（例如 “My MacBook SSH Key”），然后将刚才复制的公钥粘贴到 “Key” 文本框中。</p></li><li><p>点击 “Add SSH key” 完成添加。</p></li></ol><h3 id="5-配置-SSH-客户端"><a href="#5-配置-SSH-客户端" class="headerlink" title="5. 配置 SSH 客户端"></a>5. 配置 SSH 客户端</h3><p>接下来，我需要配置 SSH 客户端，让它使用正确的密钥连接到 GitHub。编辑 <code>~/.ssh/config</code> 文件（如果没有该文件，可以手动创建），并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>  Hostname ssh.github.com<br>  Port 443<br>  User git<br>  IdentityFile ~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p>这段配置告诉 SSH 客户端，在连接 GitHub 时使用 <code>~/.ssh/id_ed25519</code> 作为私钥，并通过端口 443 连接（这个端口通常会被网络防火墙允许）。</p><h3 id="6-测试-SSH-连接"><a href="#6-测试-SSH-连接" class="headerlink" title="6. 测试 SSH 连接"></a>6. 测试 SSH 连接</h3><p>配置完成后，我使用以下命令测试 SSH 连接是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果一切正常，终端会显示如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">Hi Your_uesrname! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>这表明你已经成功通过 SSH 连接到 GitHub。</p><h3 id="7-修改Hexo配置文件"><a href="#7-修改Hexo配置文件" class="headerlink" title="7. 修改Hexo配置文件"></a>7. 修改Hexo配置文件</h3><p>修改Myblog或者Hexo下的配置文件<code>—config.yml</code>，找到<code>deploy</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;USERNAME&gt;/&lt;NAME.github.io&gt;.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从使用 token 认证切换到 SSH 认证，不仅提高了安全性，还简化了操作流程。虽然设置过程稍显复杂，但一旦配置成功，它为我节省了大量的时间和精力，尤其是在进行自动化部署和持续集成时。通过这种方式，我能够更加高效地管理 GitHub 上的代码和项目。</p><p>如果你还在使用 token 方式与 GitHub 进行交互，我强烈建议你尝试一下 SSH 认证。它不仅能提供更高的安全性，也能让你的开发工作更加便捷。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>SSH</tag>
      
      <tag>Token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>成功解决Error:Spawn failed错误</title>
    <link href="/2025/01/18/1-%E8%A7%A3%E5%86%B3Error-Spawn-failed%E9%94%99%E8%AF%AF/"/>
    <url>/2025/01/18/1-%E8%A7%A3%E5%86%B3Error-Spawn-failed%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>在使用 Hexo 框架将博客部署到 GitHub 时，总是遇到了 <code>Error: Spawn failed</code> 错误，具体错误信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/Users/&lt;Username&gt;/hexo-blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:524:28)<br>    at ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure><p>通过查看 Hexo 官方文档发现，或许是 <code>Git</code> 包不完整导致的 <code>Error: Spawn failed</code> 错误。在检查 macOS系统 后发现自带一个不完整版 Git ，需要通过 <code>Homebrew</code> 来安装 Git 最新版本。</p><p>所以本文将介绍安装配置 <code>Homebrew</code> 和 <code>Git</code>，最终解决这个问题。同时推荐更换 <code>Token</code>，使用 <code>SSH</code> 来部署项目，下一篇文章介绍如何更换和配置 <code>SSH</code> ，做到丝滑部署项目不卡顿。</p><hr><h3 id="1-参考-Hexo-官方文档："><a href="#1-参考-Hexo-官方文档：" class="headerlink" title="1. 参考 Hexo 官方文档："></a>1. 参考 Hexo 官方文档：</h3><p>首先，我查阅了 <a href="https://hexo.io/docs/">Hexo 官方文档</a> <strong>再次确认</strong>安装和部署的相关步骤。发现我并没有安装<a href="https://brew.sh/">Homebrew</a>。</p><h3 id="2-检查-Homebrew-和-Git"><a href="#2-检查-Homebrew-和-Git" class="headerlink" title="2. 检查 Homebrew 和 Git"></a>2. 检查 Homebrew 和 Git</h3><p>根据错误提示，问题可能与 Git 的配置有关。通过查看系统环境，发现我的 MacBook Air M2 使用的是 Apple 自带的 Git，而不是通过 Homebrew 安装的版本。这可能导致了 <code>hexo-deployer-git</code> 插件无法正确调用 Git。</p><h3 id="3-在-macOS-安装-Homebrew"><a href="#3-在-macOS-安装-Homebrew" class="headerlink" title="3. 在 macOS 安装 Homebrew"></a>3. 在 macOS 安装 Homebrew</h3><h4 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h4><p>访问 <a href="https://brew.sh/">Homebrew 官网</a>，获取最新的安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>复制并粘贴到终端中执行，Homebrew 将自动下载并安装。</p><h4 id="大陆镜像源安装"><a href="#大陆镜像源安装" class="headerlink" title="大陆镜像源安装"></a>大陆镜像源安装</h4><p>由于某些地区（如中国大陆）访问 GitHub 时可能会受到限制，导致安装 Homebrew 或通过 Homebrew 下载软件包时速度缓慢或失败。可以使用清华大学提供的 Homebrew 的镜像源来解决这个问题。通过先设置镜像源，然后安装 Homebrew。</p><ul><li>设置 Homebrew 使用清华镜像：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew --version<br></code></pre></td></tr></table></figure><h4 id="如果需更新版本"><a href="#如果需更新版本" class="headerlink" title="如果需更新版本"></a>如果需更新版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew update<br></code></pre></td></tr></table></figure><ul><li><p>如果更新时发现以下错误：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) artin@Artins-MacBook-Air homebrew % brew update<br><br>Error: /opt/homebrew is not writable. You should change the<br>ownership and permissions of /opt/homebrew back to your<br>user account:<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R artin /opt/homebrew<br></code></pre></td></tr></table></figure></li><li><p>这个错误表明 <code>/opt/homebrew</code> 目录的所有权不属于当前用户 <code>artin</code>，导致无法进行更新。你可以按照提示的步骤，使用 <code>chown</code> 命令更改该目录的所有权。具体操作如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R artin /opt/homebrew<br></code></pre></td></tr></table></figure><p>再次尝试<code>brew update</code>即可。</p></li></ul><h3 id="4-安装-Git"><a href="#4-安装-Git" class="headerlink" title="4. 安装 Git"></a>4. 安装 Git</h3><h4 id="检查-git-仓库"><a href="#检查-git-仓库" class="headerlink" title="检查 git 仓库"></a>检查 git 仓库</h4><ul><li>成功安装Homebrew检查git仓库是否完整：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/homebrew<br>git status<br></code></pre></td></tr></table></figure><ul><li>或许会出现下面错误：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">fatal: detected dubious ownership <span class="hljs-keyword">in</span> repository at <span class="hljs-string">&#x27;/opt/homebrew&#x27;</span><br>To add an exception <span class="hljs-keyword">for</span> this directory, call:<br>git config --global --add safe.directory /opt/homebrew<br></code></pre></td></tr></table></figure>  这个错误是因为 Git 检测到 <code>/opt/homebrew</code> 目录的所有权不匹配或不安全（通常发生在文件系统上的权限问题）。Git 出于安全原因默认会阻止不安全的目录操作，你可以通过添加目录为“安全”目录来解决这个问题。<br>  运行以下命令来将 <code>/opt/homebrew</code> 目录添加为 Git 的安全目录：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --add safe.directory /opt/homebrew<br></code></pre></td></tr></table></figure><br>  然后，重新运行 <code>git status</code> 来检查仓库的状态，你可能会看到如下内容：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) artin@Artins-MacBook-Air homebrew % git status<br><br>On branch master<br>Your branch is up to <span class="hljs-built_in">date</span> with <span class="hljs-string">&#x27;origin/master&#x27;</span>.<br><br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure></li></ul><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><ul><li><p>通过 Homebrew 安装 Git：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><p> 这会安装最新的 Git 版本，并确保你在 Hexo 部署过程中使用的是更新版本的 Git。</p></li><li><p>检查git的系统路径<br>  确保 Homebrew 的路径正确，并且 git 能够从终端找到。你可以检查 git 是否已正确安装在 PATH 中：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> git<br></code></pre></td></tr></table></figure><p>  此时我发现有两个git，一个是Apple的MacBookAir自带的，另一个是Homebrew下载的。首先确认 Git 是否通过 Homebrew 安装，运行以下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew list git<br></code></pre></td></tr></table></figure><ul><li><p>如果结果为空，说明 Git 不是通过 Homebrew 安装的。</p></li><li><p>如果返回路径，说明 Git 是通过 Homebrew 安装的。</p></li><li><p>如果发现以下错误：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) artin@Artins-MacBook-Air ~ % brew list git<br>Error: No such keg: /opt/homebrew/Cellar/git<br></code></pre></td></tr></table></figure><p>  首先，确保 Homebrew 安装的 Git 是在 <code>/opt/homebrew/bin/git</code> 路径下。你可以使用以下命令检查 Homebrew Git 的安装路径：</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> -a git<br></code></pre></td></tr></table></figure></li><li><p>将 Git 添加到环境变量<br>  这将列出所有 Git 可执行文件的路径。如果你看到 <code>/opt/homebrew/bin/git</code> 路径，那么我们就可以将其优先加载。<br>  需要修改你的 PATH 环境变量。编辑你的 ~&#x2F;.zshrc 配置文件（如果你使用的是 Zsh shell）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.zshrc<br></code></pre></td></tr></table></figure><p>  在文件末尾添加以下内容：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/opt/homebrew/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>  如果你使用 <code>nano</code>，按 <code>Ctrl + X</code>，然后按 <code>Y</code> 确认保存，最后按 <code>Enter</code> 退出.<br>  重新加载配置文件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc  <span class="hljs-comment"># 如果你使用 zsh</span><br></code></pre></td></tr></table></figure></li><li><p>验证Git</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">which</span> git<br>git --version<br></code></pre></td></tr></table></figure><p>  你应该看到 <code>/opt/homebrew/bin/git</code> 路径下有git版本号出现。</p></li></ul><p>现在应该可以成功通过以下代码部署项目到GitHub上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>如果还有链接还是有问题，可以试着将本地文件备份，并删除 Github 所以内容，删除 Token, 从 Token 更换为SSH认证的方式，提升连接和部署效率。详细教程在下一章，手把手教程。</p><h3 id="经验总结："><a href="#经验总结：" class="headerlink" title="经验总结："></a>经验总结：</h3><ul><li><strong>Hexo 部署的关键点：</strong> 确保 Git 配置正确，尤其是在使用 GitHub 部署时，建议使用 SSH 而非 HTTPS。为此，需要生成并配置 SSH 密钥。</li><li><strong>使用 Homebrew 安装 Git：</strong> macOS 默认的 Git 版本可能存在兼容性问题，因此建议通过 Homebrew 安装和管理 Git 版本。</li><li><strong>GitHub 配置：</strong> 如果遇到与 GitHub 连接的问题，首先检查 SSH 配置，并确保 SSH 密钥已正确添加到 GitHub 中。</li><li><strong>错误调试：</strong> 在遇到部署错误时，仔细查看错误信息，通常能够提供解决问题的线索，比如此处的 <code>Spawn failed</code> 错误，提示 Git 配置问题。</li></ul><p>如果在部署过程中遇到类似问题，可以参考此解决流程来排查和修复。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>Error</tag>
      
      <tag>Git</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>”分类“中文章按时间排序</title>
    <link href="/2025/01/16/1-%E5%88%86%E7%B1%BB%E5%86%85%E6%96%87%E7%AB%A0%E6%8C%89%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
    <url>/2025/01/16/1-%E5%88%86%E7%B1%BB%E5%86%85%E6%96%87%E7%AB%A0%E6%8C%89%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>找到Fluid主题下<code>_config.yml</code>文件，搜索<code>category page</code>,可以看到:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br></code></pre></td></tr></table></figure><p>文章的排序字段，前面带减号是倒序，不带减号是正序.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;date&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到<code>菜单栏 - 分类 - 博客</code> 中文章原本排序为：<br><code>3.AAA 2.BBB 1.CCC</code><br>现在为：<br><code>1.CCC 2.BBB 3.AAA</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文章显示“更新”标志</title>
    <link href="/2025/01/14/1-%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E6%9B%B4%E6%96%B0%E6%A0%87%E5%BF%97/"/>
    <url>/2025/01/14/1-%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E6%9B%B4%E6%96%B0%E6%A0%87%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>博客中，您可能希望标记哪些文章最近更新过，以便读者更方便地识别最新内容。本文将教您如何添加一个“Updated”标志，并基于更新时间动态隐藏标志（如超过 7 天后隐藏）。</p><ol><li>使用文章的 <code>updated</code> 属性判断文章是否有更新。</li><li>在模板中为“Updated”标志添加 <code>data-updated</code> 属性，记录更新时间。</li><li>使用 JavaScript 脚本，在页面加载时计算更新时间与当前时间的差距，动态控制标志的显示或隐藏。</li><li>使用 CSS 为“Updated”标志添加样式。</li></ol><hr><h3 id="步骤-1：修改文章模板"><a href="#步骤-1：修改文章模板" class="headerlink" title="步骤 1：修改文章模板"></a><strong>步骤 1：修改文章模板</strong></h3><p>我们需要在文章列表模板中添加“Updated”标志。找到 <code>index.ejs</code>（首页），通常路径：<code>themes/fluid/layout/index.ejs</code></p><p>在模板文件中找到<code>index-btm post-metas</code>（如日期显示的位置), 插入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;index-btm post-metas&quot;&gt;<br>  &lt;% if (theme.index.post_meta.date) &#123; %&gt;<br>    &lt;div class=&quot;post-meta&quot;&gt;<br>      &lt;i class=&quot;iconfont icon-date&quot;&gt;&lt;/i&gt;<br>      &lt;time datetime=&quot;&lt;%= full_date(post.date, &#x27;YYYY-MM-DD HH:mm&#x27;) %&gt;&quot; pubdate&gt;<br>        &lt;%- date(post.date, config.date_format) %&gt;<br>      &lt;/time&gt;<br><br>      &lt;%# -------- 加入以下内容 --------%&gt;<br>      &lt;% if (post.updated) &#123; %&gt;<br>        &lt;% const updatedDays = (new Date() - new Date(post.updated)) / (1000 * 60 * 60 * 24); %&gt;<br>        &lt;% if (updatedDays &lt;= 7) &#123; %&gt;<br>          &lt;span class=&quot;updated-flag&quot; data-updated=&quot;&lt;%= post.updated.toISOString() %&gt;&quot;&gt;Updated within 7 days&lt;/span&gt;<br>        &lt;% &#125; %&gt;<br>      &lt;% &#125; %&gt;<br>      &lt;%# ----------------------------%&gt;<br><br>    &lt;/div&gt;<br>  &lt;% &#125; %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>span</code>标签显示”Updated within 7 days“，也可以换成”Updated“ 或者”更新“。</p></blockquote><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><ol><li><strong><code>post.updated</code></strong>：检查文章是否有 <code>updated</code> 属性。</li><li><strong>计算时间差</strong>：<code>(new Date() - new Date(post.updated)) / (1000 * 60 * 60 * 24)</code> 将更新时间差转换为天数。</li><li><strong>判断 7 天内</strong>：如果更新时间差小于等于 7 天，显示“Updated”标志。</li><li><strong><code>data-updated</code> 属性</strong>：将更新时间以 ISO 格式写入 <code>data-updated</code>，供 JavaScript 使用。</li></ol><h3 id="步骤-2：创建动态脚本"><a href="#步骤-2：创建动态脚本" class="headerlink" title="步骤 2：创建动态脚本"></a><strong>步骤 2：创建动态脚本</strong></h3><p>在主题的 <code>source/js/</code> 文件夹中创建一个新的文件 <code>update-flag.js</code>，用于动态隐藏过期的标志。</p><p>文件路径：<code>themes/fluid/source/js/update-flag.js</code></p><p>添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;DOM fully loaded&quot;</span>);<br>  <span class="hljs-keyword">const</span> updateFlags = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.updated-flag&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Found updated flags:&quot;</span>, updateFlags);<br><br>  <span class="hljs-keyword">const</span> expiryDays = <span class="hljs-number">7</span>; <span class="hljs-comment">// 设置有效期为 7 天</span><br>  <span class="hljs-keyword">const</span> expiryTime = expiryDays * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>; <span class="hljs-comment">// 转换为毫秒</span><br><br>  updateFlags.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">flag</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> updatedDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(flag.<span class="hljs-property">dataset</span>.<span class="hljs-property">updated</span>); <span class="hljs-comment">// 从 data-updated 获取时间</span><br>    <span class="hljs-keyword">const</span> timeDiff = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - updatedDate.<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 当前时间与更新时间的差</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Article updated on: <span class="hljs-subst">$&#123;updatedDate&#125;</span>, Time difference: <span class="hljs-subst">$&#123;timeDiff / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)&#125;</span> days`</span>);<br><br>    <span class="hljs-keyword">if</span> (timeDiff &gt; expiryTime) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hiding outdated updated flag&quot;</span>);<br>      flag.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏过期标志</span><br>    &#125;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="步骤-3：确保脚本被加载"><a href="#步骤-3：确保脚本被加载" class="headerlink" title="步骤 3：确保脚本被加载"></a><strong>步骤 3：确保脚本被加载</strong></h3><p>在主题的 <code>scripts.ejs</code> 文件中。<br>通常位于 <code>themes/fluid/layout/_partial/scripts.ejs</code>），添加对 <code>update-flag.js</code> 的引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/update-flag.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>defer</code> 确保脚本在页面内容加载完成后执行。</p><h3 id="步骤-4：定义样式"><a href="#步骤-4：定义样式" class="headerlink" title="步骤 4：定义样式"></a><strong>步骤 4：定义样式</strong></h3><p>为“Updated”标志添加样式，使其在页面上显眼且美观。找到主题的 CSS 文件。<br>通常是<code>themes/fluid/source/css/_pages/_base/color-schema.styl</code>，在文件末尾添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.updated-flag</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0000</span>; <span class="hljs-comment">/* 红色背景 */</span><br>  <span class="hljs-attribute">color</span>: white;             <span class="hljs-comment">/* 白色文字 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8em</span>;         <span class="hljs-comment">/* 小字号 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span>;         <span class="hljs-comment">/* 内边距 */</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;       <span class="hljs-comment">/* 圆角 */</span><br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;         <br>&#125;<br></code></pre></td></tr></table></figure><p>虽然<code>styl</code>文件支持css，但是以防万一，可以使用以下代码：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-class">.updated-flag</span><br>  <span class="hljs-attribute">background-color</span> <span class="hljs-number">#5d8744</span><br>  <span class="hljs-attribute">color</span> white<br>  <span class="hljs-attribute">font-size</span> <span class="hljs-number">0.8em</span><br>  <span class="hljs-attribute">padding</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span><br>  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">3px</span><br>  <span class="hljs-attribute">margin-left</span> <span class="hljs-number">5px</span> <br></code></pre></td></tr></table></figure><h3 id="步骤-5：测试并验证"><a href="#步骤-5：测试并验证" class="headerlink" title="步骤 5：测试并验证"></a><strong>步骤 5：测试并验证</strong></h3><h4 id="1-创建测试文件"><a href="#1-创建测试文件" class="headerlink" title="1. 创建测试文件"></a>1. <strong>创建测试文件</strong></h4><p>   在<code>source/_posts</code>下面创建文章<code>test.md</code>。修改某篇文章的 Front Matter，让 <code>updated</code> 时间为近期或较早的日期，此文章超过7天，<code>updated</code>标志消失，可以修改其文章已测试显示<code>updated</code>：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-01-01</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2025-01-08</span><br></code></pre></td></tr></table></figure></p><h4 id="2-生成和部署"><a href="#2-生成和部署" class="headerlink" title="2. 生成和部署"></a>2. <strong>生成和部署</strong></h4><p>   运行以下命令生成并查看网站：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure></p><h4 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a><strong>验证效果</strong></h4><ul><li>如果文章的更新时间在 7 天内，页面应显示“Updated”标志。</li><li>如果超过 7 天，标志应动态隐藏。</li></ul><p>希望本教程能帮助你优化博客的用户体验！如有任何问题，欢迎留言交流！ 🚀</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>HTML</tag>
      
      <tag>js</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2025/01/13/1-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/01/13/1-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>我创建了个人博客网站，基于 GitHub Pages 作为开源服务器，使用 Hexo 作为博客框架，Fluid 主题为界面设计。博客中使用 LeanCloud 作为阅读量统计工具，通过 GitHub 或者自己服务器进行部署。此博客网站完全免费，适合需要搭建个人博客的用户。</p><blockquote><p>此部分内容基于<a href="https://blog.csdn.net/yaorongke/article/details/119089190">CSDN博客作者</a>的介绍。 以下为过程简述并添加注意部分。同时推荐阅读<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid用户手册</a>进行个性化设置，还可以参考官方的展示博客<a href="https://hexo.fluid-dev.com/">Hexo Theme Fluid</a>获得创造灵感。</p></blockquote><hr><h3 id="1-在-GitHub-上创建一个新仓库"><a href="#1-在-GitHub-上创建一个新仓库" class="headerlink" title="1. 在 GitHub 上创建一个新仓库"></a>1. <strong>在 GitHub 上创建一个新仓库</strong></h3><ul><li>在 GitHub 上创建一个新的代码仓库，名称必须为 <code>&lt;您的GitHub用户名&gt;.github.io</code>，例如 <code>artintyt.github.io</code>。</li><li>创建成功后，您将拥有一个可以访问的页面 <code>https://artintyt.github.io</code>，这是您的博客网站的基础。</li><li>注意：branch设置为main。可以先在仓库写个初始页面来测试地址正常打开。</li></ul><h3 id="2-安装-Hexo-和设置博客"><a href="#2-安装-Hexo-和设置博客" class="headerlink" title="2. 安装 Hexo 和设置博客"></a>2. <strong>安装 Hexo 和设置博客</strong></h3><ul><li>在您的电脑上安装 <strong>Node.js</strong> 和 <strong>Git</strong>（如文章中的准备工作部分所述）。</li><li>注意：用终端安装时，先通过指令到达自己新建的 my-blog文件夹。</li><li>使用以下命令安装 Hexo：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li>创建一个 Hexo 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init my-blog<br><span class="hljs-built_in">cd</span> my-blog<br>npm install<br></code></pre></td></tr></table></figure></li><li>启动服务器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo server<br></code></pre></td></tr></table></figure></li><li>测试页面是否正常启动：<a href="http://localhost:4000/">http://localhost:4000</a></li></ul><h3 id="3-更换-Hexo-主题为-Fluid"><a href="#3-更换-Hexo-主题为-Fluid" class="headerlink" title="3. 更换 Hexo 主题为 Fluid"></a>3. <strong>更换 Hexo 主题为 Fluid</strong></h3><ul><li>在 Hexo 博客目录中安装您喜欢的主题（例如 <strong>Fluid</strong> 主题）：<ul><li>下载并解压 Fluid 主题至<code>my-blog</code>下面的 <code>themes</code> 文件夹</li><li>修改 Hexo 配置文件 <code>_config.yml</code>，设置主题为 <code>fluid</code>：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure></li><li>配置文件 <code>_config.yml</code>配置博客语言、标题等个性化信息。</li><li>注意，有两个配置文件：<ul><li><code>my-blog</code>下面的是Hexo框架的配置文件</li><li><code>fluid</code>下面的是fluid主题的配置文件</li></ul></li></ul></li><li>启动本地服务器,并访问地址: <a href="http://localhost:4000/">http://localhost:4000</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-配置-LeanCloud-统计网址阅读量和访问人数"><a href="#4-配置-LeanCloud-统计网址阅读量和访问人数" class="headerlink" title="4. 配置 LeanCloud 统计网址阅读量和访问人数"></a>4. <strong>配置 LeanCloud 统计网址阅读量和访问人数</strong></h3><ul><li>注册 <strong>LeanCloud</strong> ，从<code>设置 - 应用凭证</code>中获取 <code>AppID</code> 和 <code>AppKey</code>。</li><li>配置您的 Hexo 主题，打开 <code>themes/fluid/_config.yml</code> 文件，添加 LeanCloud 的 <code>AppID</code> 和 <code>AppKey</code>，开启阅读量统计和评论功能。</li></ul><h3 id="5-创建博客文章"><a href="#5-创建博客文章" class="headerlink" title="5. 创建博客文章"></a>5. <strong>创建博客文章</strong></h3><ul><li>使用 Hexo 命令创建新文章：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;我的第一篇博客&quot;</span><br></code></pre></td></tr></table></figure></li><li>在 <code>source/_posts</code> 文件夹中编辑文章内容（Markdown&#x2F;html 格式）。文件以<code>.md</code>结尾。</li><li>图片等文件可以放在 <code>source/images</code> 目录下。</li></ul><h3 id="6-部署博客到-GitHub-Pages"><a href="#6-部署博客到-GitHub-Pages" class="headerlink" title="6. 部署博客到 GitHub Pages"></a>6. <strong>部署博客到 GitHub Pages</strong></h3><ul><li><p>配置 GitHub 仓库为 Hexo 的发布目标，将访问令牌存储在环境变量中，避免直接写入配置文件。在 <code>_config.yml</code> 中添加以下配置：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://&lt;您的GitHub用户名&gt;:$&#123;GH_TOKEN&#125;@github.com/&lt;您的GitHub用户名&gt;/&lt;您的博客网址&gt;.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>我们将<code>repo</code>的敏感部分替换为环境变量。在终端中设置环境变量 <code>GH_TOKEN</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GH_TOKEN=ghp_xxxx<br></code></pre></td></tr></table></figure></p><blockquote><p>  <strong>注意</strong>: 此环境变量只在当前终端会话中有效。如果需要永久生效，可以将其添加到 <code>.bashrc</code>、<code>.zshrc</code> 或其他 Shell 配置文件中。</p></blockquote></li><li><p>然后运行以下命令使其生效，例如，在 <code>.zshrc</code> 文件中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure></li><li><p>安装部署插件并部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br>hexo g -d<br></code></pre></td></tr></table></figure></li><li><p>访问 <code>https://&lt;您的GitHub用户名&gt;.github.io</code> 查看您的博客。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI基础概念</title>
    <link href="/2025/01/12/2-AI%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2025/01/12/2-AI%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>什么是AI（Artificial intelligence 人工智能）：通过机器学习，深度学习等算法，使得系统具备学习、推理、自我修正和解决问题等功能。</p><ul><li>语言</li><li>语音</li><li>视觉</li><li>多模态感知和决策</li></ul><p><em>意图识别；情绪识别；表情识别</em></p><h2 id="NL-自然语言"><a href="#NL-自然语言" class="headerlink" title="NL 自然语言"></a>NL 自然语言</h2><h3 id="NLP-自然语言处理"><a href="#NLP-自然语言处理" class="headerlink" title="NLP 自然语言处理"></a>NLP 自然语言处理</h3><p>自然语言处理（Natural Language Processing, NLP）是人工智能的一个子领域，致力于实现计算机对人类语言的理解、和生成。包含从<em>文本处理</em>到<em>语音识别</em>的广泛任务。</p><p>例子:</p><ul><li>文本分类: 电子邮件过滤系统可以使用NLP来自动将邮件分类为“垃圾邮件”或“非垃圾邮件”。</li><li>情感分析: 社交媒体监控工具可以使用NLP来分析用户评论的情感倾向（正面、负面或中性）。</li></ul><h3 id="NLU-自然语言理解"><a href="#NLU-自然语言理解" class="headerlink" title="NLU 自然语言理解"></a>NLU 自然语言理解</h3><p>自然语言理解（Natural Language Understanding）是NLP的一个子领域，专注于使计算机能够理解人类语言的含义。NLU涉及语义分析、意图识别、实体识别等任务。</p><p>例子:</p><ul><li>意图识别: 当对语音助手说“帮我订一张明天去纽约的机票”，系统需要识别用户的意图是“订票”。</li><li>实体识别: 在同一句话中，系统需要识别出“纽约”是一个地名，“明天”是一个时间表达。</li></ul><h3 id="NLG-自然语言生成"><a href="#NLG-自然语言生成" class="headerlink" title="NLG 自然语言生成"></a>NLG 自然语言生成</h3><p>自然语言生成（Natural Language Generation）是NLP的另一个子领域，专注于计算机能生成人类的语言, 非常贴近真人说话的方式。NLG通常用于自动报告生成、内容创作等场景。<br>例子:</p><ul><li>自动报告: 金融分析工具可以使用NLG来生成每日或每周的市场分析报告。</li><li>内容创作: 新闻自动写作系统可以根据输入的数据生成新闻文章，如体育比赛的赛后报道。</li></ul><h4 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h4><p>假设智能语音助手（如Siri或Alexa）</p><ol><li>用户输入: 明天的天气怎么样？</li><li>NLP: <ul><li>语音识别: 将语言转换为文本.</li><li>文本预处理: 来清理和规范化文本,去除空格或标点.</li></ul></li><li>NLU: <ul><li>意图识别: 首先识别用户意图”询问天气”. </li><li>实体识别: 再识别出”明天”是时间相关实体.</li></ul></li><li>数据处理: 系统查询天气数据库, 获取”明天”的天气信息.</li><li>NLG: <ul><li>生成文本: 将查询结果转换为自然语言文本:”明天是晴天,最高10度,最低-5度,要注意保暖哦”. </li><li>语音合成: 将文本转换为语音,并播放给用户听.</li></ul></li></ol><h2 id="监督学习-Supervised-Learning"><a href="#监督学习-Supervised-Learning" class="headerlink" title="监督学习(Supervised Learning)"></a>监督学习(Supervised Learning)</h2><p>监督学习是一种机器学习方法，模型通过已知的输入和输出数据进行训练，直到模型能够准确地匹配输入和输出的关系。</p><h3 id="分类（Classification）"><a href="#分类（Classification）" class="headerlink" title="分类（Classification）"></a>分类（Classification）</h3><p>分类任务是将输入数据分为离散的类别。</p><ul><li>例子：垃圾邮件过滤。给定一封电子邮件，模型需要判断这封邮件是垃圾邮件（spam）还是正常邮件（ham）。</li></ul><h3 id="回归（Regression）"><a href="#回归（Regression）" class="headerlink" title="回归（Regression）"></a>回归（Regression）</h3><p>回归任务是预测连续的数值输出。</p><ul><li>例子：房价预测。根据特征（如房子的面积、位置等），模型预测房子的价格。</li></ul><h3 id="关联规则（Association-Rule）"><a href="#关联规则（Association-Rule）" class="headerlink" title="关联规则（Association Rule）"></a>关联规则（Association Rule）</h3><p>关联规则是寻找数据中不同项之间的关系或模式。</p><ul><li>例子：购物篮分析。超市可以通过关联规则发现哪些商品常常一起被购买，比如“如果顾客买了面包和黄油，他们也很可能会买牛奶”。</li></ul><h2 id="无监督学习（Unsupervised-Learning）"><a href="#无监督学习（Unsupervised-Learning）" class="headerlink" title="无监督学习（Unsupervised Learning）"></a>无监督学习（Unsupervised Learning）</h2><p>无监督学习是一种机器学习方法，模型在没有标签数据（即没有输入和输出配对）的情况下，通过数据内部的结构进行学习。</p><h3 id="聚类（Clustering）"><a href="#聚类（Clustering）" class="headerlink" title="聚类（Clustering）"></a>聚类（Clustering）</h3><p>聚类任务是将数据分成不同的组，每个组中的数据项彼此相似。</p><ul><li>例子：客户细分。根据购买行为的数据，商业可以将客户分成不同的群体，比如“大宗购买者”、“偶尔购买者”等。</li></ul><h2 id="强化学习（Reinforcement-Learning）"><a href="#强化学习（Reinforcement-Learning）" class="headerlink" title="强化学习（Reinforcement Learning）"></a>强化学习（Reinforcement Learning）</h2><p>强化学习是一种机器学习方法，其中一个<strong>智能体（Agent</strong>通过与**环境（Environment）**互动，以试错的方式学习如何完成任务或达到目标。</p><blockquote><p>个人感觉和Stochastic Optimisation很像，如果学过会很快理解这个部分。</p></blockquote><h3 id="核心概念："><a href="#核心概念：" class="headerlink" title="核心概念："></a>核心概念：</h3><ol><li>状态（States）：状态是对当前环境的一种描述。在任何时刻，Agent所处的状态反映了当前的环境情况。</li></ol><ul><li>例子：在一个迷宫游戏中，state可以是agent当前所在的位置；在围棋中，状态就是棋盘上每颗棋子的布局。</li></ul><ol start="2"><li>奖励（Reward）：奖励是对agent在某个state下采取某个动作后的反馈，它可以是<strong>正的</strong>（奖励）或<strong>负的</strong>（惩罚）。</li></ol><ul><li>例子：在迷宫游戏中，如果智能体走到正确的方向，可以获得正的奖励（例如+10分）；如果撞到墙壁，可能会获得<strong>负的奖励</strong>（例如-10分，也就是惩罚）。</li></ul><ol start="3"><li>智能体（Agent）：智能体是执行动作并接收reward的决策者。agent通过不断地选择动作来改变其state，从而尝试最大化累计reward。</li></ol><ul><li>例子：在自动驾驶汽车中，智能体就是控制汽车行驶的算法；在游戏中，智能体就是玩家控制的角色或者对手AI。</li></ul><h3 id="强化学习的过程："><a href="#强化学习的过程：" class="headerlink" title="强化学习的过程："></a>强化学习的过程：</h3><ol><li>观察：agent观察当前的state。</li><li>选择动作：根据当前state，agent选择一个动作。这个动作可能基于之前的学习，也可能是一个随机选择。</li><li>执行动作：agent执行所选择的动作，环境随之发生改变。</li><li>获取反馈：环境向agent提供执行该动作后的新state和即时reward。</li><li>更新策略：agent根据reward更新其策略，使其在未来选择更优的动作，以获得更多的累计reward。</li></ol><h3 id="一个简单的例子："><a href="#一个简单的例子：" class="headerlink" title="一个简单的例子："></a>一个简单的例子：</h3><p>玩具汽车学习走迷宫</p><ol><li>状态（States）：玩具汽车在迷宫中的位置，例如（2, 3）代表在迷宫中第二行第三列的位置。</li><li>动作（Actions）：玩具汽车可以前进的方向，例如上、下、左、右。</li><li>奖励（Reward）：如果玩具汽车朝着出口前进，它获得一个正的奖励（+10分）；如果撞到死胡同或墙，则获得负的奖励（-10分）。</li><li>智能体（Agent）：控制玩具汽车的AI</li></ol><h2 id="机器学习效果评估"><a href="#机器学习效果评估" class="headerlink" title="机器学习效果评估"></a>机器学习效果评估</h2><h3 id="欠拟合-Under-fitting"><a href="#欠拟合-Under-fitting" class="headerlink" title="欠拟合 (Under-fitting)"></a>欠拟合 (Under-fitting)</h3><p>欠拟合是指模型过于简单，无法捕捉到训练数据中的模式和特征，导致在训练数据和新数据上的表现都很差。</p><ul><li><strong>实际例子</strong>：在房价预测问题中，你只用房子的面积一个特征来预测价格，而忽略了位置、房龄、装修等重要特征，导致模型无法准确预测房价</li></ul><h3 id="最佳拟合-Optimal-fitting"><a href="#最佳拟合-Optimal-fitting" class="headerlink" title="最佳拟合 (Optimal-fitting)"></a>最佳拟合 (Optimal-fitting)</h3><p>最佳拟合是指模型恰当地捕捉到了训练数据中的模式和特征，同时也能很好地应用于新数据。这种情况下，模型在训练数据和测试数据上都有良好的表现。</p><ul><li><strong>实际例子</strong>：在房价预测问题中，你考虑了多个重要特征（如面积、位置、房龄、装修等），模型能够准确预测训练数据中的房价，并在新数据上表现也很好。</li></ul><h3 id="过拟合-Over-fitting"><a href="#过拟合-Over-fitting" class="headerlink" title="过拟合 (Over-fitting)"></a>过拟合 (Over-fitting)</h3><p>过拟合是指模型过于复杂，过度地记住了训练数据中的每一个细节和噪声，从而失去了对新数据的泛化能力。过拟合的模型在训练数据上表现很好，但在新数据上表现较差。</p><ul><li><strong>实际例子</strong>：在房价预测问题中，你不仅使用了面积、位置、房龄、装修等特征，还加入了一些不相关的特征（如前几天是否下过雨），模型在训练数据上表现非常好，但在新数据上预测效果很差。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>欠拟合 (Under-fitting)：模型太简单，不能很好地捕捉数据中的模式。</li></ol><ul><li>简单例子：用直线拟合“U”形数据。</li><li>实际例子：房价预测中只用面积一个特征。</li></ul><ol start="2"><li>最佳拟合 (Optimal-fitting)：模型恰到好处，既能很好地拟合训练数据，也能对新数据有良好表现。</li></ol><ul><li>简单例子：用合适的二次曲线拟合“U”形数据。</li><li>实际例子：房价预测中使用了多个重要特征。</li></ul><ol start="3"><li>过拟合 (Over-fitting)：模型太复杂，过度记住了训练数据，无法泛化到新数据。</li></ol><ul><li>简单例子：用复杂的高次多项式拟合“U”形数据，过度拟合了每个数据点。</li><li>实际例子：房价预测中加入了很多不相关特征，结果在新数据上效果不好。<br>总之，目标是找到让模型最佳拟合训练数据和测试数据的平衡点，既不过于简单也不过于复杂。</li></ul><h2 id="深度学习-Deep-Learning"><a href="#深度学习-Deep-Learning" class="headerlink" title="深度学习 (Deep Learning)"></a>深度学习 (Deep Learning)</h2><p>深度学习是一种机器学习方法，它利用多层神经网络进行复杂的数据处理和模式识别。在理解深度学习时，我们需要了解神经网络的三种关键层：</p><ul><li>输入层（Input Layer）: 接收原始数据.</li><li>隐藏层（Hidden Layer）: 提取和转换输入数据的特征。</li><li>输出层（Output Layer）: 给出预测结果。</li></ul><p>通过这些层的协同工作，神经网络能够从原始数据中学习模式，并对新数据进行准确的预测或分类。神经网络（Neural Network）是模仿人脑工作原理的一种算法，由多个互相连接的节点（也叫神经元）组成。这些节点被组织成不同的层，通过层与层之间的连接和权重调整来处理数据。</p><h3 id="输入层-Input-Layer"><a href="#输入层-Input-Layer" class="headerlink" title="输入层 (Input Layer)"></a>输入层 (Input Layer)</h3><p>输入层是神经网络的第一个层，它接收原始的数据输入。这些输入可以是图像的像素值、文本的词向量或其他形式的数据。输入层的节点（或神经元）数目取决于输入数据的特征数。</p><ul><li>例子：<ul><li><strong>图像分类：</strong> 如果你有一张28x28像素的灰度图像作为输入，输入层将有28×28&#x3D;784个节点，每个节点代表一个像素值。</li><li><strong>房价预测：</strong> 如果你有五个特征（如面积、位置、房龄等），输入层将有5个节点，每个节点代表一个特征值。</li></ul></li></ul><h3 id="隐藏层-Hidden-Layer"><a href="#隐藏层-Hidden-Layer" class="headerlink" title="隐藏层 (Hidden Layer)"></a>隐藏层 (Hidden Layer)</h3><p><strong>隐藏层</strong>位于输入层和输出层之间，负责对输入数据进行特征提取和变换。隐藏层可以有一层或多层，称为“深度”正是因为有许多隐藏层。每个隐藏层通过与前一层和后一层的连接（权重和偏置）来传递信息。</p><ul><li>例子：<ul><li><strong>图像分类：</strong> 何将28x28像素的输入映射到更加抽象的特征层，如第一层可能识别边缘，第二层可能识别更复杂的形状。</li><li><strong>房价预测：</strong> 隐藏层可以捕捉输入特征的复杂非线性关系，帮助模型准确预测房价。</li></ul></li></ul><h3 id="输出层-Output-Layer"><a href="#输出层-Output-Layer" class="headerlink" title="输出层 (Output Layer)"></a>输出层 (Output Layer)</h3><p><strong>输出层</strong>是神经网络的最后一层，它给出模型的最终预测结果。输出层的节点数目和类型取决于具体的任务。</p><ul><li>例子：<ul><li><strong>图像分类：</strong> 如果你要把图像分类为10个类别（如手写数字0-9），输出层将有10个节点，每个节点代表一个类别的概率。</li><li><strong>房价预测：</strong> 如果你需要预测房价，输出层将有一个节点，它输出房价的预测值。</li></ul></li></ul><h3 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h3><h4 id="任务：图像分类"><a href="#任务：图像分类" class="headerlink" title="任务：图像分类"></a>任务：图像分类</h4><ol><li><strong>输入层</strong>：假设我们分类的是28x28像素的手写数字图像。<ul><li><strong>输入层节点数：</strong> 784个节点，每个节点对应一个像素值。</li></ul></li><li><strong>隐藏层</strong>：假设有两层隐藏层。<ul><li><strong>第一隐藏层：</strong> 提取简单特征（如边缘），设有128个节点。</li><li><strong>第二隐藏层：</strong> 提取更复杂的特征（如更高层次的形状），设有64个节点。</li></ul></li><li><strong>输出层</strong>：假设分类为10个类别（数字0到9）。<ul><li><strong>输出层节点数：</strong> 10个节点，每个节点代表图像属于某个数字类别的概率。</li></ul></li></ol><h4 id="任务：房价预测"><a href="#任务：房价预测" class="headerlink" title="任务：房价预测"></a>任务：房价预测</h4><ol><li><strong>输入层：</strong> 假设预测房价时用五个特征：面积、位置、房龄、房型、市场状况。<ul><li><strong>输入层节点数：</strong> 5个节点，每个节点代表一个特征。</li></ul></li><li><strong>隐藏层：</strong> 假设有一层隐藏层。<ul><li><strong>隐藏层：</strong> 捕捉输入特征之间的复杂关系，设有10个节点。</li></ul></li><li><strong>输出层：</strong> 输出预测的房价。<ul><li><strong>输出层节点数：</strong> 1个节点，表示预测的房价。</li></ul></li></ol><h2 id="神经网络-Neural-Networks"><a href="#神经网络-Neural-Networks" class="headerlink" title="神经网络 (Neural Networks)"></a>神经网络 (Neural Networks)</h2><h2 id="CNN（卷积神经网络）"><a href="#CNN（卷积神经网络）" class="headerlink" title="CNN（卷积神经网络）"></a>CNN（卷积神经网络）</h2><h2 id="RNN（循环神经网络"><a href="#RNN（循环神经网络" class="headerlink" title="RNN（循环神经网络)"></a>RNN（循环神经网络)</h2><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h2 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h2><h2 id="GPT（生成式预训练）"><a href="#GPT（生成式预训练）" class="headerlink" title="GPT（生成式预训练）"></a>GPT（生成式预训练）</h2><h2 id="向量数据库"><a href="#向量数据库" class="headerlink" title="向量数据库"></a>向量数据库</h2><h2 id="嵌入（Embeddings）"><a href="#嵌入（Embeddings）" class="headerlink" title="嵌入（Embeddings）"></a>嵌入（Embeddings）</h2><h2 id="LLM（大语言模型）"><a href="#LLM（大语言模型）" class="headerlink" title="LLM（大语言模型）"></a>LLM（大语言模型）</h2><h2 id="Model-Size"><a href="#Model-Size" class="headerlink" title="Model Size"></a>Model Size</h2><h2 id="OpenAI-简介"><a href="#OpenAI-简介" class="headerlink" title="OpenAI 简介"></a>OpenAI 简介</h2>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>DL</tag>
      
      <tag>ML</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
